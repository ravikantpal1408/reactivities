{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/models/ModalContainer.tsx","features/profile/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profile/ProfilePhotos.tsx","features/profile/ProfileContent.tsx","features/profile/ProfilePage.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","method","errors","hasOwnProperty","responseBody","sleep","ms","resolve","setTimeout","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","details","id","create","activity","update","attend","unattend","currentUser","login","user","register","username","uploadPhoto","photo","setMain","deletePhoto","setActivityProps","date","Date","isGoing","userActivities","some","a","isHost","createAttendee","displayName","image","ActivityStore","rootStore","getActivity","activityRegistry","this","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","groupActivitiesByDate","Array","from","values","observable","Map","computed","action","loadingInitial","agent","console","log","runInAction","forEach","userStore","set","submitting","attendee","attendees","event","target","currentTarget","name","loading","filter","UserStore","commonStore","setToken","modalStore","closeModal","CommonStore","reaction","setItem","removeItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","profile","loadingProfile","uploadingPhoto","photos","isMain","find","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","ActivityListItemAttendees","List","horizontal","map","key","Popup","trigger","size","circular","ActivityListItem","host","x","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","LoadingComponent","Dimmer","active","Loader","loadActivities","useEffect","Grid","Column","width","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","keys","length","flat","err","i","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","catch","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","disabled","fluid","RegisterForm","HomePage","isLoggedIn","openModal","vertical","className","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","value","onChange","e","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","useState","setActivity","setLoading","params","finally","initialValues","dateAndTime","timeString","getHours","getMinutes","year","getFullYear","month","getMonth","day","getDate","dateString","combineDateAndTime","newActivity","uuid","widths","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendee","attached","padding","ActivityDetailedInfo","verticalAlign","ActivityDetailedChat","border","Comment","Avatar","Author","Metadata","Text","Actions","Action","reply","TextArea","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","Statistic","label","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderColor","borderRadius","paddingTop","cursor","dropzoneActive","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","ref","aspectRatio","guides","viewMode","scalable","crop","current","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","minHeight","overflow","isCurrentUser","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","panes","menuItem","menu","menuPosition","activeIndex","loadProfile","withRouter","location","setAppLoaded","getUser","path","marginTop","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c278855.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { IActivity } from '../models/activity';\nimport { history } from '../..';\nimport { toast } from 'react-toastify';\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport { IProfile, IPhoto } from \"../models/profile\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use((config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(undefined, error => {\n\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!')\n    }\n    const { status, data, config } = error.response;\n    if (status === 404) {\n        history.push('/notfound')\n    }\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/notfound')\n    }\n    if (status === 500) {\n        toast.error('Server error - check the terminal for more info!')\n    }\n\n    throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst sleep = (ms: number) => (response: AxiosResponse) =>\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\n    postForm: (url: string, file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file)\n        return axios.post(url, formData,\n            {\n                headers: { 'Content-type': 'multipart/form-data' }\n            }).then(responseBody)\n    }\n};\n\nconst Activities = {\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`),\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n    unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n};\n\nconst User = {\n    currentUser: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user)\n};\n\nconst Profile = {\n    get: (username: string): Promise<IProfile> => requests.get(`/profiles/${username}`),\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos`, photo),\n    setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`)\n};\n\nexport default {\n    Activities,\n    User,\n    Profile\n}","import {IActivity, IAttendee} from \"../../models/activity\";\nimport {IUser} from \"../../models/user\";\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const dateString = `${year}-${month}-${day}`;\n\n    return new Date(dateString + ' ' + timeString);\n};\n\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n    activity.date = new Date(activity.date);\n    activity.isGoing = activity.userActivities.some(\n        a => a.username === user.username\n    );\n\n    activity.isHost = activity.userActivities.some(\n        a => a.username === user.username && a.isHost\n    );\n\n    return activity;\n};\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n    return {\n        displayName: user.displayName,\n        isHost: false,\n        username: user.username,\n        image: user.image!,\n    };\n};","import {observable, action, computed, runInAction} from 'mobx';\nimport {SyntheticEvent} from 'react';\nimport {IActivity} from '../models/activity';\nimport agent from '../api/agent';\nimport {history} from '../..';\nimport {toast} from 'react-toastify';\nimport {RootStore} from \"./rootStore\";\nimport {createAttendee, setActivityProps} from \"../common/util/util\";\n\n\nexport default class ActivityStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable activityRegistry = new Map();\n    @observable activity: IActivity | null = null;\n    @observable loadingInitial = false;\n    @observable submitting = false;\n    @observable target = '';\n    @observable loading = false;\n\n    @computed get activitiesByDate() {\n        return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()))\n    }\n\n    groupActivitiesByDate(activities: IActivity[]) {\n        const sortedActivities = activities.sort(\n            (a, b) => a.date.getTime() - b.date.getTime()\n        );\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\n            const date = activity.date.toISOString().split('T')[0];\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n            return activities;\n        }, {} as { [key: string]: IActivity[] }));\n    }\n\n    @action loadActivities = async () => {\n        this.loadingInitial = true;\n\n        try {\n            const activities = await agent.Activities.list();\n\n            console.log('my all activities : ', activities);\n            runInAction('loading activities', () => {\n                activities.forEach(activity => {\n                    // setting props for activities\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activityRegistry.set(activity.id, activity);\n\n                });\n                this.loadingInitial = false;\n            });\n        } catch (error) {\n            runInAction('load activities error', () => {\n                this.loadingInitial = false;\n            });\n        }\n    };\n\n    @action loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.activity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                runInAction('getting activity', () => {\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activity = activity;\n                    this.activityRegistry.set(activity.id, activity);\n                    this.loadingInitial = false;\n                });\n                return activity;\n            } catch (error) {\n                runInAction('get activity error', () => {\n                    this.loadingInitial = false;\n                });\n                console.log(error);\n            }\n        }\n    };\n\n    @action clearActivity = () => {\n        this.activity = null;\n    };\n\n    getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    };\n\n    @action createActivity = async (activity: IActivity) => {\n        this.submitting = true;\n        try {\n            await agent.Activities.create(activity);\n            const attendee = createAttendee(this.rootStore.userStore.user!);\n            attendee.isHost = true;\n            let attendees = [];\n            attendees.push(attendee);\n            activity.userActivities = attendees;\n            activity.isHost = true;\n            runInAction('create activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.submitting = false;\n            });\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('create activity error', () => {\n                this.submitting = false;\n            });\n            toast.error('Problem submitting data');\n            console.log(error.response);\n        }\n    };\n\n    @action editActivity = async (activity: IActivity) => {\n        this.submitting = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction('editing activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.activity = activity;\n                this.submitting = false;\n            });\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('edit activity error', () => {\n                this.submitting = false;\n            });\n            toast.error('Problem submitting data');\n            console.log(error);\n        }\n    };\n\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\n        this.submitting = true;\n        this.target = event.currentTarget.name;\n        try {\n            await agent.Activities.delete(id);\n            runInAction('deleting activity', () => {\n                this.activityRegistry.delete(id);\n                this.submitting = false;\n                this.target = '';\n            });\n        } catch (error) {\n            runInAction('delete activity error', () => {\n                this.submitting = false;\n                this.target = '';\n            });\n            console.log(error);\n        }\n    };\n\n    @action attendActivity = async () => {\n        const attendee = createAttendee(this.rootStore.userStore.user!);\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.activity!.id);\n            runInAction(() => {\n                if (this.activity) {\n                    this.activity.userActivities.push(attendee);\n                    this.activity.isGoing = true;\n                    this.activityRegistry.set(this.activity.id, this.activity);\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => {\n                this.loading = false;\n            });\n            toast.error('problem signing up to activity');\n        }\n\n    };\n\n    @action cancelAttendee = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.unattend(this.activity!.id);\n            runInAction(() => {\n                if (this.activity) {\n                    this.activity.userActivities = this.activity.userActivities\n                        .filter(a => a.username !== this.rootStore.userStore.user!.username);\n                    this.activity.isGoing = false;\n                    this.activityRegistry.set(this.activity.id, this.activity);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => {\n                this.loading = false;\n            });\n            console.log('problem cancelling attendance');\n\n        }\n\n    };\n}\n\n","import {action, computed, observable, runInAction} from \"mobx\";\nimport {IUser, IUserFormValues} from \"../models/user\";\nimport agent from \"../api/agent\";\nimport {RootStore} from \"./rootStore\";\nimport {history} from '../..';\n\nexport default class UserStore {\n\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {\n        return !!this.user;\n    }\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n                // console.log('current user :', user)\n            });\n\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    };\n\n    @action register = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.register((values));\n\n            runInAction(() => {\n                this.user = user;\n            });\n\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    };\n\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.currentUser();\n            runInAction(() => {\n                this.user = user;\n            });\n        } catch (e) {\n            console.log('Error : ', e);\n            throw e\n        }\n    };\n\n\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/')\n    };\n\n\n}","import {RootStore} from \"./rootStore\";\nimport {action, observable, reaction} from \"mobx\";\n\nexport default class CommonStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(() => this.token, token => {\n            if (token) {\n                window.localStorage.setItem('jwt', token);\n            } else {\n                window.localStorage.removeItem('jwt');\n            }\n        })\n    }\n\n    @observable token: string | null = window.localStorage.getItem('jwt');\n    @observable appLoaded = false;\n\n\n    @action setToken = (token: string | null) => {\n        // window.localStorage.setItem('jwt', token!);\n        this.token = token;\n    };\n\n\n    @action setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n\n}","import {RootStore} from \"./rootStore\";\nimport {observable, action} from \"mobx\";\n\nexport default class ModalStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable.shallow modal = {\n        open: false,\n        body: null\n    };\n\n    @action openModal = (content: any) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    };\n\n    @action closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    };\n}","import { RootStore } from \"./rootStore\";\nimport { action, computed, observable, runInAction } from \"mobx\";\nimport { IProfile, IPhoto } from \"../models/profile\";\nimport agent from \"../api/agent\";\nimport { toast } from \"react-toastify\";\n\nexport default class ProfileStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable profile: IProfile | null = null;\n    @observable loadingProfile: boolean = true;\n    @observable uploadingPhoto: boolean = false;\n    @observable loading: boolean = false;\n\n\n    @computed get isCurrentUser() {\n        if (this.rootStore.userStore.user && this.profile) {\n            return this.rootStore.userStore.user.username === this.profile.username;\n        } else {\n            return false;\n        }\n    }\n\n\n    @action loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profile.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n\n        } catch (error) {\n\n            runInAction(() => {\n                this.loadingProfile = false;\n\n            });\n            console.log('error happened : ', error)\n\n        }\n    }\n\n    @action uploadPhoto = async (file: Blob) => {\n        try {\n            this.uploadingPhoto = true;\n            const photo = await agent.Profile.uploadPhoto(file);\n            runInAction(() => {\n\n                if (this.profile) {\n                    this.profile.photos.push(photo);\n                    if (photo.isMain && this.rootStore.userStore.user) {\n                        this.rootStore.userStore.user.image = photo.url;\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploadingPhoto = false;\n            });\n        } catch (error) {\n            console.log('Error happened in uploading photo')\n            console.log(error)\n            runInAction(() => {\n                toast.error('Problem uploading photo')\n                this.uploadingPhoto = false;\n            })\n        }\n\n    }\n\n    @action setMainPhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profile.setMain(photo.id);\n            runInAction(() => {\n                this.rootStore.userStore.user!.image = photo.url;\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\n                this.profile!.image = photo.url;\n                this.loading = false;\n            });\n        } catch (error) {\n            toast.error('Problem setting photo as main');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    }\n\n\n    @action deletePhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profile.deletePhoto(photo.id);\n            runInAction(() => {\n                this.profile!.photos = this.profile!.photos.filter(\n                    a => a.id !== photo.id\n                );\n                this.loading = false;\n            });\n        } catch (error) {\n            toast.error('Problem deleting the photo');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n} ","import ActivityStore from \"./activityStore\";\nimport UserStore from \"./userStore\";\nimport {createContext} from \"react\";\nimport {configure} from \"mobx\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\n\nconfigure({enforceActions: 'always'});\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n\n    constructor() {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n    }\n\n}\n\nexport const RootStoreContext = createContext(new RootStore()); ","import React, {useContext} from 'react';\nimport {Menu, Container, Button, Dropdown, Image} from 'semantic-ui-react';\nimport {observer} from 'mobx-react-lite';\nimport {NavLink, Link} from 'react-router-dom';\nimport {RootStoreContext} from '../../app/stores/rootStore';\n\nconst NavBar: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {user, logout} = rootStore.userStore;\n    return (\n        <Menu fixed='top' inverted>\n            <Container>\n                <Menu.Item header as={NavLink} exact to='/'>\n                    <img src='/assets/logo.png' alt='logo' style={{marginRight: 10}}/>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item name='Activities' as={NavLink} to='/activities'/>\n                <Menu.Item>\n                    <Button\n                        as={NavLink}\n                        to='/createActivity'\n                        positive\n                        content='Create Activity'\n                    />\n                </Menu.Item>\n                {user && (\n                    <Menu.Item position='right'>\n                        <Image avatar spaced='right' src={user.image || '/assets/user.png'}/>\n                        <Dropdown pointing='top left' text={user.displayName}>\n                            <Dropdown.Menu>\n                                <Dropdown.Item\n                                    as={Link}\n                                    to={`/profile/${user.username}`}\n                                    text='My profile'\n                                    icon='user'\n                                />\n                                <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>\n                )}\n            </Container>\n        </Menu>\n    );\n};\n\nexport default observer(NavBar);\n","import React from 'react';\nimport {List, Image, Popup} from 'semantic-ui-react';\nimport {IAttendee} from \"../../../app/models/activity\";\n\ninterface IProps {\n    attendees: IAttendee[]\n}\n\nconst ActivityListItemAttendees: React.FC<IProps> = ({attendees}) => {\n\n\n    return (\n        <List horizontal>\n            {attendees.map((attendee) => (\n                <List.Item key={attendee.username}>\n                    <Popup header={attendee.displayName} trigger={\n                        <Image size='mini' circular src={attendee.image || `/assets/user.png`}/>\n                    }/>\n\n                </List.Item>\n            ))}\n        </List>\n    )\n};\n\nexport default ActivityListItemAttendees; ","import React from 'react';\nimport {Item, Button, Segment, Icon, Label} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {IActivity} from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({activity}) => {\n    const host = activity.userActivities.filter(x => x.isHost)[0];\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={host.image || '/assets/user.png'}\n                                    style={{marginBottom: '3px'}}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by\n                                <Link to={`/profile/${host.username}`}> {host.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='orange'\n                                        content='You are hosting this activity'\n                                    />\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='green'\n                                        content='You are going to this activity'\n                                    />\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <Icon name='clock'/> {format(activity.date, 'h:mm a')}\n                <Icon name='marker'/> {activity.venue}, {activity.city}\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendees attendees={activity.userActivities}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    floated='right'\n                    content='View'\n                    color='blue'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default ActivityListItem;\n","import React, {useContext, Fragment} from 'react';\nimport {Item, Label} from 'semantic-ui-react';\nimport {observer} from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst ActivityList: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {activitiesByDate} = rootStore.activityStore;\n    \n\n    return (\n        <Fragment>\n            {activitiesByDate.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Label size='large' color='blue'>\n                        {group}\n                    </Label>\n                    <Item.Group divided>\n                        {activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity}/>\n                        ))}\n                    </Item.Group>\n                </Fragment>\n            ))}\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityList);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, {useContext, useEffect} from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport {observer} from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst ActivityDashboard: React.FC = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {loadActivities, loadingInitial} = rootStore.activityStore;\n\n    useEffect(() => {\n        loadActivities();\n    }, [loadActivities]);\n\n    if (loadingInitial)\n        return <LoadingComponent content='Loading activities'/>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityList/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <h2>Activity filters</h2>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDashboard);\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport {AxiosResponse} from 'axios';\nimport {Message} from 'semantic-ui-react';\n\ninterface IProps {\n    error: AxiosResponse;\n    text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\n    return (\n        <Message error>\n            <Message.Header>{error.statusText}</Message.Header>\n            {error.data && Object.keys(error.data.errors).length > 0 && (\n                <Message.List>\n                    {Object.values(error.data.errors).flat().map((err, i) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n            {text && <Message.Content content={text}/>}\n        </Message>\n    );\n};\n\nexport default ErrorMessage;\n","import React, {useContext} from 'react';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Form, Button, Header} from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport {IUserFormValues} from '../../app/models/user';\nimport {FORM_ERROR} from 'final-form';\nimport {combineValidators, isRequired} from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n    email: isRequired('Email'),\n    password: isRequired('Password')\n});\n\nconst LoginForm = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {login} = rootStore.userStore;\n    return (\n        <FinalForm\n            onSubmit={(values: IUserFormValues) =>\n                login(values).catch(error => ({\n                    [FORM_ERROR]: error\n                }))\n            }\n            validate={validate}\n            render={({\n                         handleSubmit,\n                         submitting,\n                         submitError,\n                         invalid,\n                         pristine,\n                         dirtySinceLastSubmit\n                     }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header\n                        as='h2'\n                        content='Login to Reactivities'\n                        color='teal'\n                        textAlign='center'\n                    />\n                    <Field name='email' component={TextInput} placeholder='Email'/>\n                    <Field\n                        name='password'\n                        component={TextInput}\n                        placeholder='Password'\n                        type='password'\n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                        <ErrorMessage\n                            error={submitError}\n                            text='Invalid email or password'\n                        />\n                    )}\n                    <Button\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                        loading={submitting}\n                        color='teal'\n                        content='Login'\n                        fluid\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default LoginForm;\n","import React, {useContext} from 'react';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Form, Button, Header} from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport {IUserFormValues} from '../../app/models/user';\nimport {FORM_ERROR} from 'final-form';\nimport {combineValidators, isRequired} from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n    username: isRequired('Username'),\n    displayName: isRequired('DisplayName'),\n    email: isRequired('Email'),\n    password: isRequired('Password')\n});\n\nconst RegisterForm = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {register} = rootStore.userStore;\n    return (\n        <FinalForm\n            onSubmit={(values: IUserFormValues) =>\n                register(values).catch(error => ({\n                    [FORM_ERROR]: error\n                }))\n            }\n            validate={validate}\n            render={({\n                         handleSubmit,\n                         submitting,\n                         submitError,\n                         invalid,\n                         pristine,\n                         dirtySinceLastSubmit\n                     }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header\n                        as='h2'\n                        content='Sign up to Reactivities'\n                        color='teal'\n                        textAlign='center'\n                    />\n                    <Field name='username' component={TextInput} placeholder='Username'/>\n                    <Field\n                        name='displayName'\n                        component={TextInput}\n                        placeholder='Display Name'\n                    />\n                    <Field name='email' component={TextInput} placeholder='Email'/>\n                    <Field\n                        name='password'\n                        component={TextInput}\n                        placeholder='Password'\n                        type='password'\n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                        <ErrorMessage\n                            error={submitError}\n                        />\n                    )}\n                    <Button\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                        loading={submitting}\n                        color='teal'\n                        content='Register'\n                        fluid\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default RegisterForm;\n","import React, {useContext, Fragment} from 'react';\nimport {Container, Segment, Header, Button, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\n\nconst HomePage = () => {\n\n    const rootStore = useContext(RootStoreContext);\n\n    const {isLoggedIn, user} = rootStore.userStore;\n\n    const {openModal} = rootStore.modalStore;\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image\n                        size='massive'\n                        src='/assets/logo.png'\n                        alt='logo'\n                        style={{marginBottom: 12}}\n                    />\n                    Reactivities\n                </Header>\n                {isLoggedIn && user ?\n                    (<Fragment>\n\n                        <Header as='h2' inverted content={`Welcome back ${user.displayName}`}/>\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Take me to the activities!\n                        </Button>\n\n                    </Fragment>) : (\n                        <Fragment>\n                            <Header as='h2' inverted content='Welcome to Reactivities'/>\n                            <Button onClick={() => openModal(<LoginForm/>)} size='huge' inverted>\n                                Login\n                            </Button>\n                            <Button onClick={() => openModal(<RegisterForm/>)} size='huge' inverted>\n                                Register\n                            </Button>\n                        </Fragment>)}\n            </Container>\n        </Segment>\n    );\n};\n\nexport default HomePage;\n","export interface IActivity {\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    date: Date;\n    city: string;\n    venue: string;\n    isGoing: boolean;\n    isHost: boolean;\n    userActivities: IAttendee[];\n}\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n    time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date?: Date = undefined;\n    time?: Date = undefined;\n    city: string = '';\n    venue: string = '';\n\n    constructor(init?: IActivityFormValues) {\n        if (init && init.date) {\n            init.time = init.date;\n        }\n        Object.assign(this, init);\n    }\n}\n\n\nexport interface IAttendee {\n    username: string;\n    displayName: string;\n    image: string;\n    isHost: boolean;\n}","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput\n","export const category = [\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\n  { key: 'culture', text: 'Culture', value: 'culture' },\n  { key: 'film', text: 'Film', value: 'film' },\n  { key: 'food', text: 'Food', value: 'food' },\n  { key: 'music', text: 'Music', value: 'music' },\n  { key: 'travel', text: 'Travel', value: 'travel' }\n];","import React, {useState, useContext, useEffect} from 'react';\nimport {Segment, Form, Button, Grid} from 'semantic-ui-react';\nimport {ActivityFormValues} from '../../../app/models/activity';\nimport {v4 as uuid} from 'uuid';\nimport {observer} from 'mobx-react-lite';\nimport {RouteComponentProps} from 'react-router';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport {category} from '../../../app/common/options/categoryOptions';\nimport {combineDateAndTime} from '../../../app/common/util/util';\nimport {\n    combineValidators,\n    isRequired,\n    composeValidators,\n    hasLengthGreaterThan\n} from 'revalidate';\nimport {RootStoreContext} from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n    title: isRequired({message: 'The event title is required'}),\n    category: isRequired('Category'),\n    description: composeValidators(\n        isRequired('Description'),\n        hasLengthGreaterThan(4)({\n            message: 'Description needs to be at least 5 characters'\n        })\n    )(),\n    city: isRequired('City'),\n    venue: isRequired('Venue'),\n    date: isRequired('Date'),\n    time: isRequired('Time')\n});\n\ninterface DetailParams {\n    id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n                                                                       match,\n                                                                       history\n                                                                   }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {\n        createActivity,\n        editActivity,\n        submitting,\n        loadActivity\n    } = rootStore.activityStore;\n\n    const [activity, setActivity] = useState(new ActivityFormValues());\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (match.params.id) {\n            setLoading(true);\n            loadActivity(match.params.id)\n                .then(activity => {\n                    setActivity(new ActivityFormValues(activity));\n                })\n                .finally(() => setLoading(false));\n        }\n    }, [loadActivity, match.params.id]);\n\n    const handleFinalFormSubmit = (values: any) => {\n        const dateAndTime = combineDateAndTime(values.date, values.time);\n        const {date, time, ...activity} = values;\n        activity.date = dateAndTime;\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n\n            console.log('This is new activity form payload data :', newActivity);\n            createActivity(newActivity);\n        } else {\n            editActivity(activity);\n        }\n    };\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <Segment clearing>\n                    <FinalForm\n                        validate={validate}\n                        initialValues={activity}\n                        onSubmit={handleFinalFormSubmit}\n                        render={({handleSubmit, invalid, pristine}) => (\n                            <Form onSubmit={handleSubmit} loading={loading}>\n                                <Field\n                                    name='title'\n                                    placeholder='Title'\n                                    value={activity.title}\n                                    component={TextInput}\n                                />\n                                <Field\n                                    name='description'\n                                    placeholder='Description'\n                                    rows={3}\n                                    value={activity.description}\n                                    component={TextAreaInput}\n                                />\n                                <Field\n                                    component={SelectInput}\n                                    options={category}\n                                    name='category'\n                                    placeholder='Category'\n                                    value={activity.category}\n                                />\n                                <Form.Group widths='equal'>\n                                    <Field\n                                        component={DateInput}\n                                        name='date'\n                                        date={true}\n                                        placeholder='Date'\n                                        value={activity.date}\n                                    />\n                                    <Field\n                                        component={DateInput}\n                                        name='time'\n                                        time={true}\n                                        placeholder='Time'\n                                        value={activity.time}\n                                    />\n                                </Form.Group>\n\n                                <Field\n                                    component={TextInput}\n                                    name='city'\n                                    placeholder='City'\n                                    value={activity.city}\n                                />\n                                <Field\n                                    component={TextInput}\n                                    name='venue'\n                                    placeholder='Venue'\n                                    value={activity.venue}\n                                />\n                                <Button\n                                    loading={submitting}\n                                    disabled={loading || invalid || pristine}\n                                    floated='right'\n                                    positive\n                                    type='submit'\n                                    content='Submit'\n                                />\n                                <Button\n                                    onClick={\n                                        activity.id\n                                            ? () => history.push(`/activities/${activity.id}`)\n                                            : () => history.push('/activities')\n                                    }\n                                    disabled={loading}\n                                    floated='right'\n                                    type='button'\n                                    content='Cancel'\n                                />\n                            </Form>\n                        )}\n                    />\n                </Segment>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityForm);\n","import React, {useContext} from 'react';\nimport {Segment, Item, Header, Button, Image} from 'semantic-ui-react';\nimport {IActivity} from '../../../app/models/activity';\nimport {observer} from 'mobx-react-lite';\nimport {Link} from 'react-router-dom';\nimport {format} from 'date-fns';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({activity}) => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {attendActivity, cancelAttendee, loading} = rootStore.activityStore;\n    const host = activity.userActivities.filter(x => x.isHost)[0];\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                    fluid\n                    style={activityImageStyle}\n                />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\n                                <p>\n                                    Hosted by <Link\n                                    to={`/profile/${host.username}`}><strong> {host.displayName}</strong></Link>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            < Segment\n                clearing\n                attached='bottom'>\n\n\n                {\n                    activity.isHost ? (<Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\n                        Manage Event\n                    </Button>) : activity.isGoing ? (\n                        <Button loading={loading} onClick={cancelAttendee}>Cancel attendance</Button>) : (\n                        <Button loading={loading} color='teal' onClick={attendActivity}>Join Activity</Button>)\n                }\n\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\n\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date, 'eeee do MMMM')} at {format(activity.date!, 'h:mm a')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import React, { Fragment } from 'react';\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\n\nconst ActivityDetailedChat = () => {\n  return (\n    <Fragment>\n      <Segment\n        textAlign='center'\n        attached='top'\n        inverted\n        color='teal'\n        style={{ border: 'none' }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Matt</Comment.Author>\n              <Comment.Metadata>\n                <div>Today at 5:42PM</div>\n              </Comment.Metadata>\n              <Comment.Text>How artistic!</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Comment>\n            <Comment.Avatar src='/assets/user.png' />\n            <Comment.Content>\n              <Comment.Author as='a'>Joe Henderson</Comment.Author>\n              <Comment.Metadata>\n                <div>5 days ago</div>\n              </Comment.Metadata>\n              <Comment.Text>Dude, this is awesome. Thanks so much</Comment.Text>\n              <Comment.Actions>\n                <Comment.Action>Reply</Comment.Action>\n              </Comment.Actions>\n            </Comment.Content>\n          </Comment>\n\n          <Form reply>\n            <Form.TextArea />\n            <Button\n              content='Add Reply'\n              labelPosition='left'\n              icon='edit'\n              primary\n            />\n          </Form>\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default ActivityDetailedChat;\n","import React, {Fragment} from 'react';\nimport {Segment, List, Item, Label, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {IAttendee} from \"../../../app/models/activity\";\nimport {observer} from \"mobx-react-lite\";\n\ninterface IProps {\n    attendees: IAttendee[]\n}\n\nconst ActivityDetailedSidebar: React.FC<IProps> = ({attendees}) => {\n\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                style={{border: 'none'}}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'}\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map((attendee) => (\n                            <Item style={{position: 'relative'}} key={attendee.username}>\n                                {attendee.isHost &&\n                                <Label style={{position: 'absolute'}}\n                                       color='orange'\n                                       ribbon='right'>\n                                    {attendee.displayName}\n                                </Label>}\n                                <Image size='tiny' src={attendee.image || '/assets/user.png'}/>\n                                <Item.Content verticalAlign='middle'>\n                                    <Item.Header as='h3'>\n                                        <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\n                                    </Item.Header>\n                                    <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>\n                                </Item.Content>\n                            </Item>\n                        )\n                    )}\n\n                </List>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import React, {useContext, useEffect} from 'react';\nimport {Grid} from 'semantic-ui-react';\n\nimport {observer} from 'mobx-react-lite';\nimport {RouteComponentProps} from 'react-router';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\ninterface DetailParams {\n    id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n                                                                          match,\n                                                                          history\n                                                                      }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {activity, loadActivity, loadingInitial} = rootStore.activityStore;\n\n    useEffect(() => {\n        loadActivity(match.params.id);\n    }, [loadActivity, match.params.id, history]);\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...'/>;\n\n    if (!activity) return <h2>Activity not found</h2>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar attendees={activity.userActivities}/>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import React, {useContext} from 'react';\nimport {Modal} from 'semantic-ui-react';\nimport {RootStoreContext} from '../../stores/rootStore';\nimport {observer} from 'mobx-react-lite';\n\nconst ModalContainer = () => {\n\n    const rootStore = useContext(RootStoreContext);\n\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\n\n    return (\n        <Modal open={open} onClose={closeModal} size='mini'>\n            <Modal.Content>{body}</Modal.Content>\n        </Modal>\n    );\n};\n\nexport default observer(ModalContainer);\n","import React from 'react';\nimport {\n    Segment,\n    Item,\n    Header,\n    Button,\n    Grid,\n    Statistic,\n    Divider,\n    Reveal\n} from 'semantic-ui-react';\nimport { observer } from \"mobx-react-lite\";\nimport { IProfile } from \"../../app/models/profile\";\n\ninterface IProps {\n    profile: IProfile\n}\n\nconst ProfileHeader: React.FC<IProps> = ({ profile }) => {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1'>{profile.displayName}</Header>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value='5' />\n                        <Statistic label='Following' value='42' />\n                    </Statistic.Group>\n                    <Divider />\n                    <Reveal animated='move'>\n                        <Reveal.Content visible style={{ width: '100%' }}>\n                            <Button fluid color='teal' content='Following' />\n                        </Reveal.Content>\n                        <Reveal.Content hidden>\n                            <Button\n                                fluid\n                                basic\n                                color={true ? 'red' : 'green'}\n                                content={true ? 'Unfollow' : 'Follow'}\n                            />\n                        </Reveal.Content>\n                    </Reveal>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default observer(ProfileHeader);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Icon, Header } from 'semantic-ui-react';\nimport { observer } from \"mobx-react-lite\";\n\ninterface IProps {\n    setFiles: (files: object[]) => void;\n}\n\nconst dropzoneStyles = {\n    border: 'dashed 3px',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: '200px',\n    cursor: 'pointer'\n};\n\nconst dropzoneActive = {\n    borderColor: 'green'\n};\n\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(\n            acceptedFiles.map((file: object) =>\n                Object.assign(file, {\n                    preview: URL.createObjectURL(file)\n                })\n            )\n        );\n    }, [setFiles]);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n    return (\n        <div\n            {...getRootProps()}\n            style={\n                isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\n            }\n        >\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    );\n};\n\nexport default observer(PhotoWidgetDropzone);\n","import React, {useRef} from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n    setImage: (file: Blob) => void;\n    imagePreview: string;\n}\n\nconst PhotoWidgetCropper: React.FC<IProps> = ({setImage, imagePreview}) => {\n    \n    const cropper = useRef<Cropper>(null);\n\n    const cropImage = () => {\n        if (\n            cropper.current &&\n            typeof cropper.current.getCroppedCanvas() === 'undefined'\n        ) {\n            return;\n        }\n        cropper &&\n        cropper.current &&\n        cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n            setImage(blob);\n        }, 'image/jpeg');\n    };\n\n\n    \n    return (\n        <div>\n            <Cropper\n                ref={cropper}\n                src={imagePreview}\n                style={{height: 400, width: '100%'}}\n                // Cropper.js options\n                preview='.img-preview'\n                aspectRatio={1 / 1}\n                guides={false}\n                viewMode={1}\n                scalable={true}\n                crop={cropImage}\n            />\n        </div>\n    )\n};\n\nexport default PhotoWidgetCropper;","import React, { Fragment, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport { Grid, Header, Button } from \"semantic-ui-react\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\n\ninterface IProps {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n    const [files, setFiles] = useState<any[]>([]);\n    const [image, setImage] = useState<Blob | null>(null);\n\n    useEffect(() => {\n        return () => {\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        }\n    });\n    return (\n        <Fragment>\n            <Grid>\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 1 - Add Photo' sub />\n                    <PhotoWidgetDropzone setFiles={setFiles} />\n                </Grid.Column>\n\n                <Grid.Column width={1} />\n\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 2 - Resize Photo' sub />\n                    {files.length > 0 && <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview} />}\n                </Grid.Column>\n\n                <Grid.Column width={1} />\n\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 3 - Preview & Upload' sub />\n                    {files.length > 0 &&\n                        <Fragment>\n                            <div className=\"img-preview\" style={{ minHeight: '200px', overflow: 'hidden' }} />\n                            <Button.Group widths={2}>\n                                <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)} />\n                                <Button icon='close' disabled={loading} onClick={() => setFiles([])} />\n                            </Button.Group>\n                        </Fragment>\n\n                    }\n                </Grid.Column>\n\n            </Grid>\n        </Fragment>\n    );\n};\n\nexport default observer(PhotoUploadWidget);","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Card, Header, Tab, Image, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\n\nconst ProfilePhotos = () => {\n    const rootStore = useContext(RootStoreContext);\n    const { profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, loading, deletePhoto } = rootStore.profileStore;\n\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState<string | undefined>(undefined);\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\n\n    const handleUploadImage = (photo: Blob) => {\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n                    {isCurrentUser && (\n                        <Button\n                            floated=\"right\"\n                            basic\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handleUploadImage} loading={uploadingPhoto} />\n                    ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile &&\n                                    profile.photos.map(photo => (\n                                        <Card key={photo.id}>\n                                            <Image src={photo.url} />\n                                            {isCurrentUser && (\n                                                <Button.Group fluid widths={2}>\n                                                    <Button name={photo.id} basic positive content=\"Main\"\n                                                        onClick={(e) => {\n                                                            setTarget(e.currentTarget.name);\n                                                            setMainPhoto(photo);\n                                                        }}\n                                                        loading={loading && target === photo.id}\n                                                        disabled={photo.isMain}\n                                                    />\n                                                    <Button name={photo.id} basic negative icon=\"trash\"\n                                                        onClick={(e) => {\n                                                            deletePhoto(photo);\n                                                            setDeleteTarget(e.currentTarget.name);\n                                                        }}\n                                                        loading={loading && deleteTarget === photo.id}\n                                                        disabled={photo.isMain}\n                                                    />\n                                                </Button.Group>\n                                            )}\n                                        </Card>\n                                    ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfilePhotos);\n","import React from 'react';\nimport {Tab} from 'semantic-ui-react';\nimport {observer} from \"mobx-react-lite\";\nimport ProfilePhotos from \"./ProfilePhotos\";\n\nconst panes = [\n    {menuItem: 'About', render: () => <Tab.Pane>About content</Tab.Pane>},\n    {menuItem: 'Photos', render: () => <ProfilePhotos/>},\n    {menuItem: 'Activities', render: () => <Tab.Pane>Activities content</Tab.Pane>},\n    {menuItem: 'Followers', render: () => <Tab.Pane>Followers content</Tab.Pane>},\n    {menuItem: 'Following', render: () => <Tab.Pane>Following content</Tab.Pane>}\n];\nconst ProfileContent = () => {\n    return (\n        <Tab menu={{fluid: true, vertical: true}} menuPosition='right' panes={panes} activeIndex={1}/>\n    )\n};\n\nexport default observer(ProfileContent);","import React, {useContext, useEffect} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Grid} from \"semantic-ui-react\";\nimport ProfileHeader from \"./ProfileHeader\";\nimport ProfileContent from \"./ProfileContent\";\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport {RouteComponentProps} from 'react-router';\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\n\ninterface RouteParams {\n    username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {\n}\n\nconst ProfilePage: React.FC<IProps> = ({match}) => {\n    const rootStore = useContext(RootStoreContext);\n\n    const {loadingProfile, loadProfile, profile} = rootStore.profileStore;\n\n    useEffect(() => {\n\n        loadProfile(match.params.username);\n\n    }, [loadProfile, match]);\n\n    if (loadingProfile) return (<LoadingComponent content='Loading Profile ...'/>);\n\n    return (\n        <Grid>\n            <Grid.Column\n                width={16}>\n                <ProfileHeader profile={profile!}/>\n                <ProfileContent/>\n            </Grid.Column>\n        </Grid>\n    )\n        ;\n};\n\n\nexport default observer(ProfilePage);","import React, {Fragment, useContext, useEffect} from 'react';\nimport {Container} from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport {\n    Route,\n    withRouter,\n    RouteComponentProps,\n    Switch\n} from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport {ToastContainer} from 'react-toastify';\n// import LoginForm from '../../features/user/LoginForm';\nimport {RootStoreContext} from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from \"../common/models/ModalContainer\";\nimport ProfilePage from \"../../features/profile/ProfilePage\";\n// import RegisterForm from \"../../features/user/RegisterForm\";\n\n\nconst App: React.FC<RouteComponentProps> = ({location}) => {\n    const rootStore = useContext(RootStoreContext);\n    const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\n    const {getUser} = rootStore.userStore;\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => setAppLoaded())\n        } else {\n            setAppLoaded();\n        }\n    }, [getUser, setAppLoaded, token]);\n\n    if (!appLoaded) return <LoadingComponent content='Loading app...'/>\n\n    return (\n        <Fragment>\n            <ModalContainer/>\n            <ToastContainer position='bottom-right'/>\n            <Route exact path='/' component={HomePage}/>\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <Fragment>\n                        <NavBar/>\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <Route exact path='/activities' component={ActivityDashboard}/>\n                                <Route path='/activities/:id' component={ActivityDetails}/>\n                                <Route\n                                    key={location.key}\n                                    path={['/createActivity', '/manage/:id']}\n                                    component={ActivityForm}\n                                />\n                                <Route path='/profile/:username' component={ProfilePage}/>\n                                {/*<Route path='/login' component={LoginForm}/>*/}\n                                {/*<Route path='/register' component={RegisterForm}/>*/}\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </Container>\n                    </Fragment>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {useEffect} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [pathname]);\n  \n    return children || null;\n  };\n  \n  export default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}