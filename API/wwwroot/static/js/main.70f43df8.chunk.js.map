{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilter.tsx","features/activities/dashboard/ActivityItemListPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","app/layout/LoadingComponent.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/models/ModalContainer.tsx","features/profile/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profile/ProfilePhotos.tsx","features/profile/ProfileEditForm.tsx","features/profile/ProfileDescription.tsx","features/profile/ProfileCard.tsx","features/profile/ProfileFollowings.tsx","features/profile/ProfileActivities.tsx","features/profile/ProfileContent.tsx","features/profile/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","removeItem","history","push","method","errors","hasOwnProperty","responseBody","sleep","ms","resolve","setTimeout","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attend","unattend","currentUser","login","user","register","username","uploadPhoto","photo","setMain","deletePhoto","editProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","setActivityProps","date","Date","isGoing","attendees","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","computed","action","set","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","info","e","stop","err","loadingInitial","agent","axiosParams","activityEnvelope","userStore","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadingFollowings","followings","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followingCount","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","styles","boderColor","borderWidth","ActivityListItemAttendees","List","horizontal","map","Popup","trigger","size","circular","bordered","ActivityListItem","host","x","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","setPredicate","vertical","width","marginTop","attached","active","has","onChange","ActivityListItemPlaceholder","Placeholder","fluid","minHeight","Line","Paragraph","disabled","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","ActivityFilter","Loader","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","length","flat","i","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","RegisterForm","HomePage","isLoggedIn","openModal","className","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","setActivity","setLoading","finally","initialValues","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","uuid","widths","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendee","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","isCurrentUser","Statistic","label","followersCount","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderColor","borderRadius","paddingTop","cursor","dropzoneActive","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","scalable","crop","current","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","updateProfile","bio","editMode","setEditMode","extra","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","ProfileActivities","setActiveTab","menuPosition","loadProfile","Component","props","withRouter","location","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70f43df8.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\nimport {IActivity, IActivitiesEnvelope} from '../models/activity';\nimport {history} from '../..';\nimport {toast} from 'react-toastify';\nimport {IUser, IUserFormValues} from \"../models/user\";\nimport {IProfile, IPhoto} from \"../models/profile\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use((config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(undefined, error => {\n\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!')\n    }\n    \n    const {status = '509', data ='', config = ''} = error.response || {};    \n    \n    \n    \n    if (status === 401 ) {\n        window.localStorage.removeItem('jwt');\n        history.push('/');\n        toast.error('Your session has expired. Please login again !!');\n    }\n    \n    if (status === 404) {\n        history.push('/notfound')\n    }\n    \n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/notfound')\n    }\n    \n    if (status === 500) {\n        toast.error('Server error - check the terminal for more info!');\n        history.push('/notfound')\n    }\n    \n    if (status === 509) {\n        window.localStorage.removeItem('jwt');\n        history.push('/');\n        toast.error('Server Not Working');\n    }\n\n    throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst sleep = (ms: number) => (response: AxiosResponse) =>\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\n    postForm: (url: string, file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file)\n        return axios.post(url, formData,\n            {\n                headers: {'Content-type': 'multipart/form-data'}\n            }).then(responseBody)\n    }\n};\n\nconst Activities = {\n    list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n        axios.get('/activities', {params: params}).then(sleep(1000)).then(responseBody)\n    ,\n    //requests.get(`/activities?limit=${limit}&offset=${page ? page * limit! : 0}`),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`),\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n    unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n};\n\nconst User = {\n    currentUser: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\n\n};\n\nconst Profile = {\n    get: (username: string): Promise<IProfile> => requests.get(`/profiles/${username}`),\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos`, photo),\n    setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    editProfile: (profile: Partial<IProfile>) => requests.put(`/profiles`, profile),\n    follow: (username: string) => requests.post(`/profiles/${username}/follow`, {}),\n    unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\n    listFollowings: (username: string, predicate: string) => requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) => requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n};\n\nexport default {\n    Activities,\n    User,\n    Profile\n}","import {IActivity, IAttendee} from \"../../models/activity\";\nimport {IUser} from \"../../models/user\";\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n    // const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n    //\n    // const year = date.getFullYear();\n    // const month = date.getMonth() + 1;\n    // const day = date.getDate();\n    // const dateString = `${year}-${month}-${day}`;\n\n    const dateString = date.toISOString().split('T')[0];\n    const timeString = date.toISOString().split('T')[1];\n\n    return new Date(dateString + 'T' + timeString);\n};\n\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n    activity.date = new Date(activity.date);\n    activity.isGoing = activity.attendees.some(\n        a => a.username === user.username\n    );\n\n    activity.isHost = activity.attendees.some(\n        a => a.username === user.username && a.isHost\n    );\n\n    return activity;\n};\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n    return {\n        displayName: user.displayName,\n        isHost: false,\n        username: user.username,\n        image: user.image!,\n    };\n};","import {action, computed, observable, reaction, runInAction, toJS} from 'mobx';\nimport {SyntheticEvent} from 'react';\nimport {IActivity} from '../models/activity';\nimport agent from '../api/agent';\nimport {history} from '../..';\nimport {toast} from 'react-toastify';\nimport {RootStore} from \"./rootStore\";\nimport {createAttendee, setActivityProps} from \"../common/util/util\";\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\n\nconst LIMIT = 2;\n\n/*\n* OBSERVABLE : to store the state of the application\n* ACTION : to mutate the state of current \n* COMPUTE : to calculate or implement some functionality on the state stored in the observable \n*/\n\nexport default class ActivityStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n        \n        reaction(\n            () => this.predicate.keys(),\n            ()=>{\n                this.page = 0;\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n\n    /* Observable props */\n    @observable activityRegistry = new Map();\n    @observable activity: IActivity | null = null;\n    @observable loadingInitial = false;\n    @observable submitting = false;\n    @observable target = '';\n    @observable loading = false;\n    @observable.ref hubConnection: HubConnection | null = null; // this observable is for signalR\n    @observable activityCount = 0;\n    @observable page = 0;\n    @observable predicate = new Map();\n\n    /* Computed props */\n    @computed get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('limit', String(LIMIT));\n        params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, value.toISOString());\n            } else {\n                params.append(key, value);\n            }\n        });\n        return params;\n    }\n\n\n    @computed get totalPages() {\n        return Math.ceil(this.activityCount / LIMIT);\n    }\n\n    @computed get activitiesByDate() {\n        return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()))\n    }\n\n    groupActivitiesByDate(activities: IActivity[]) {\n        const sortedActivities = activities.sort(\n            (a, b) => a.date.getTime() - b.date.getTime()\n        );\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\n            const date = activity.date.toISOString().split('T')[0];\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n            return activities;\n        }, {} as { [key: string]: IActivity[] }));\n    }\n\n\n    /* Actions props */\n\n    @action setPredicate = (predicate: string, value: string | Date) => {\n        this.predicate.clear(); // clearing the predicate \n        if (predicate !== 'all') {\n            this.predicate.set(predicate, value);\n        }\n    };\n    \n    @action setPage = (page: number) => {\n        this.page = page;\n    };\n\n    // create signalR hub connection \n    @action createHubConnection = (activityId: string) => {\n        try {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl('http://localhost:5000/chat', {\n                    accessTokenFactory: () => this.rootStore.commonStore.token!\n                })\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection\n                .start()\n                .then(() =>\n                    console.log(this.hubConnection!.state)\n                ).then(() => {\n                console.log('Attempting to join group !!');\n                // this will call method from ChatHub.cs file that is created on server\n                this.hubConnection!.invoke('AddToGroup', activityId);\n\n            }).catch(error => console.log('Error establishing connection : ', error));\n\n            // when we receive the comment\n            this.hubConnection.on('ReceiveComment', comment => {\n                runInAction(() => {\n                    this.activity!.comments.push(comment);\n                });\n            });\n\n            this.hubConnection.on('Send', message => {\n                toast.info(message);\n            });\n        } catch (e) {\n            console.log('Some error happened');\n        }\n    };\n\n    // stop signalR hub connection \n    @action stopHubConnection = () => {\n        this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\n            .then(() => {\n                this.hubConnection!.stop();\n            })\n            .then(() => console.log('Connection stopped'))\n            .catch(err => console.log('error happened while stopping a chat connection !'));\n\n    };\n\n    // add comment \n    @action addComment = async (values: any) => {\n        values.activityId = this.activity!.id;\n        try {\n            await this.hubConnection!.invoke('SendComment', values);\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n\n    @action loadActivities = async () => {\n        this.loadingInitial = true;\n\n        try {\n            const activityEnvelope = await agent.Activities.list(this.axiosParams);\n\n            const {activities, activityCount} = activityEnvelope; // de-structuring the activities\n\n            runInAction('loading activities', () => {\n                activities.forEach(activity => {\n                    // setting props for activities\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activityRegistry.set(activity.id, activity);\n\n                });\n                this.activityCount = activityCount; // setting activity count \n                this.loadingInitial = false;\n            });\n        } catch (error) {\n            runInAction('load activities error', () => {\n                this.loadingInitial = false;\n            });\n        }\n    };\n\n    @action loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.activity = activity;\n            return toJS(activity); // toJS convert observable to simple javascript object\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                runInAction('getting activity', () => {\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activity = activity;\n                    this.activityRegistry.set(activity.id, activity);\n                    this.loadingInitial = false;\n                });\n                return activity;\n            } catch (error) {\n                runInAction('get activity error', () => {\n                    this.loadingInitial = false;\n                });\n                console.log(error);\n            }\n        }\n    };\n\n    @action clearActivity = () => {\n        this.activity = null;\n    };\n\n    getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    };\n\n    @action createActivity = async (activity: IActivity) => {\n        console.log('this is creativity :' , activity);\n        this.submitting = true;\n        try {\n            await agent.Activities.create(activity);\n            const attendee = createAttendee(this.rootStore.userStore.user!);\n            attendee.isHost = true;\n            let attendees = [];\n            attendees.push(attendee);\n            activity.attendees = attendees;\n            activity.comments = [];\n            activity.isHost = true;\n            runInAction('create activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.submitting = false;\n            });\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('create activity error', () => {\n                this.submitting = false;\n            });\n            toast.error('Problem submitting data');\n            console.log(error.response);\n        }\n    };\n\n    @action editActivity = async (activity: IActivity) => {\n        this.submitting = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction('editing activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.activity = activity;\n                this.submitting = false;\n            });\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('edit activity error', () => {\n                this.submitting = false;\n            });\n            toast.error('Problem submitting data');\n            console.log(error);\n        }\n    };\n\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\n        this.submitting = true;\n        this.target = event.currentTarget.name;\n        try {\n            await agent.Activities.delete(id);\n            runInAction('deleting activity', () => {\n                this.activityRegistry.delete(id);\n                this.submitting = false;\n                this.target = '';\n            });\n        } catch (error) {\n            runInAction('delete activity error', () => {\n                this.submitting = false;\n                this.target = '';\n            });\n            console.log(error);\n        }\n    };\n\n    @action attendActivity = async () => {\n        const attendee = createAttendee(this.rootStore.userStore.user!);\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.activity!.id);\n            runInAction(() => {\n                if (this.activity) {\n                    this.activity.attendees.push(attendee);\n                    this.activity.isGoing = true;\n                    this.activityRegistry.set(this.activity.id, this.activity);\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => {\n                this.loading = false;\n            });\n            toast.error('problem signing up to activity');\n        }\n\n    };\n\n    @action cancelAttendee = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.unattend(this.activity!.id);\n            runInAction(() => {\n                if (this.activity) {\n                    this.activity.attendees = this.activity.attendees\n                        .filter(a => a.username !== this.rootStore.userStore.user!.username);\n                    this.activity.isGoing = false;\n                    this.activityRegistry.set(this.activity.id, this.activity);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => {\n                this.loading = false;\n            });\n            console.log('problem cancelling attendance');\n\n        }\n\n    };\n}\n\n","import {action, computed, observable, runInAction} from \"mobx\";\nimport {IUser, IUserFormValues} from \"../models/user\";\nimport agent from \"../api/agent\";\nimport {RootStore} from \"./rootStore\";\nimport {history} from '../..';\n\nexport default class UserStore {\n\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {\n        return !!this.user;\n    }\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n                // console.log('current user :', user)\n            });\n\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    };\n\n    @action register = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.register((values));\n\n            runInAction(() => {\n                this.user = user;\n            });\n\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    };\n\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.currentUser();\n            runInAction(() => {\n                this.user = user;\n            });\n        } catch (e) {\n            console.log('Error : ', e);\n            throw e\n        }\n    };\n\n\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/')\n    };\n\n\n}","import {RootStore} from \"./rootStore\";\nimport {action, observable, reaction} from \"mobx\";\n\nexport default class CommonStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(() => this.token, token => {\n            if (token) {\n                window.localStorage.setItem('jwt', token);\n            } else {\n                window.localStorage.removeItem('jwt');\n            }\n        })\n    }\n\n    @observable token: string | null = window.localStorage.getItem('jwt');\n    @observable appLoaded = false;\n\n\n    @action setToken = (token: string | null) => {\n        // window.localStorage.setItem('jwt', token!);\n        this.token = token;\n    };\n\n\n    @action setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n\n}","import {RootStore} from \"./rootStore\";\nimport {observable, action} from \"mobx\";\n\nexport default class ModalStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable.shallow modal = {\n        open: false,\n        body: null\n    };\n\n    @action openModal = (content: any) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    };\n\n    @action closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    };\n}","import {RootStore} from \"./rootStore\";\nimport {action, computed, observable, reaction, runInAction} from \"mobx\";\nimport {IProfile, IPhoto, IUserActivity} from \"../models/profile\";\nimport agent from \"../api/agent\";\nimport {toast} from \"react-toastify\";\n\nexport default class ProfileStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        // adding reaction for \n        reaction(() => this.activeTab, activeTab => {\n            if (activeTab === 3 || activeTab === 4) {\n                const predicate = activeTab === 3 ? 'followers' : 'following';\n                this.loadingFollowings(predicate);\n            } else {\n                this.followings = [];\n            }\n        });\n    }\n\n    @observable profile: IProfile | null = null;\n    @observable loadingProfile: boolean = true;\n    @observable uploadingPhoto: boolean = false;\n    @observable loading: boolean = false;\n    @observable followings: IProfile[] = [];\n    @observable activeTab: number = 0;\n    @observable userActivities: IUserActivity[] = [];\n    @observable loadingActivities = false;\n\n\n    @computed get isCurrentUser() {\n        if (this.rootStore.userStore.user && this.profile) {\n            return this.rootStore.userStore.user.username === this.profile.username;\n        } else {\n            return false;\n        }\n    }\n\n    @action loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profile.listActivities(username, predicate!);\n            runInAction(()=>{\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            });\n\n        } catch (error) {\n            toast.error('Error loading user activity');\n            this.loadingActivities = false;\n        }\n    };\n\n\n    @action setActiveTab = (activeIndex: number) => {\n        this.activeTab = activeIndex;\n    };\n\n    @action loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profile.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n\n        } catch (error) {\n\n            runInAction(() => {\n                this.loadingProfile = false;\n\n            });\n            console.log('error happened : ', error)\n\n        }\n    };\n\n    @action uploadPhoto = async (file: Blob) => {\n        try {\n            this.uploadingPhoto = true;\n            const photo = await agent.Profile.uploadPhoto(file);\n            runInAction(() => {\n\n                if (this.profile) {\n                    this.profile.photos.push(photo);\n                    if (photo.isMain && this.rootStore.userStore.user) {\n                        this.rootStore.userStore.user.image = photo.url;\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploadingPhoto = false;\n            });\n        } catch (error) {\n            console.log('Error happened in uploading photo')\n            console.log(error)\n            runInAction(() => {\n                toast.error('Problem uploading photo')\n                this.uploadingPhoto = false;\n            })\n        }\n\n    };\n\n    @action setMainPhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profile.setMain(photo.id);\n            runInAction(() => {\n                this.rootStore.userStore.user!.image = photo.url;\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\n                this.profile!.image = photo.url;\n                this.loading = false;\n            });\n        } catch (error) {\n            toast.error('Problem setting photo as main');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n    @action updateProfile = async (profile: Partial<IProfile>) => {\n        try {\n            await agent.Profile.editProfile(profile);\n            runInAction(() => {\n                if (profile.displayName !== this.rootStore.userStore.user!.displayName) {\n                    this.rootStore.userStore.user!.displayName = profile.displayName!;\n                    this.profile = {...this.profile!, ...profile};\n                }\n            });\n        } catch (error) {\n            toast.error(\"Problem updating profile\");\n        }\n    };\n\n\n    @action deletePhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profile.deletePhoto(photo.id);\n            runInAction(() => {\n                this.profile!.photos = this.profile!.photos.filter(\n                    a => a.id !== photo.id\n                );\n                this.loading = false;\n            });\n        } catch (error) {\n            toast.error('Problem deleting the photo');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n\n    // follow a user \n    @action follow = async (username: string) => {\n        this.loading = true;\n        try {\n            await agent.Profile.follow(username);\n            runInAction(() => {\n                this.profile!.following = true;\n                this.profile!.followingCount++;\n                this.loading = false;\n\n            });\n\n        } catch (error) {\n            toast.error('Problem following user !!')\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n\n    // un-follow a user\n    @action unfollow = async (username: string) => {\n        this.loading = true;\n        try {\n\n            await agent.Profile.unfollow(username);\n            runInAction(() => {\n                this.profile!.following = false;\n                this.profile!.followingCount--;\n                this.loading = false;\n\n            });\n\n        } catch (error) {\n            toast.error('Problem un-following user !!')\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n    // loading followings\n    @action loadingFollowings = async (predicate: string) => {\n        this.loading = true;\n        try {\n\n            const profile = await agent.Profile.listFollowings(this.profile!.username, predicate);\n\n            runInAction(() => {\n                this.followings = profile;\n                this.loading = false;\n            });\n\n        } catch (error) {\n            console.log(error);\n            toast.error('Problem getting followers');\n            runInAction(() => {\n                this.loading = false;\n            });\n\n        }\n    };\n\n} ","import ActivityStore from \"./activityStore\";\nimport UserStore from \"./userStore\";\nimport {createContext} from \"react\";\nimport {configure} from \"mobx\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\n\nconfigure({enforceActions: 'always'});\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n\n    constructor() {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n    }\n\n}\n\nexport const RootStoreContext = createContext(new RootStore()); ","import React, {useContext} from 'react';\nimport {Menu, Container, Button, Dropdown, Image} from 'semantic-ui-react';\nimport {observer} from 'mobx-react-lite';\nimport {NavLink, Link} from 'react-router-dom';\nimport {RootStoreContext} from '../../app/stores/rootStore';\n\nconst NavBar: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {user, logout} = rootStore.userStore;\n    return (\n        <Menu fixed='top' inverted>\n            <Container>\n                <Menu.Item header as={NavLink} exact to='/'>\n                    <img src='/assets/logo.png' alt='logo' style={{marginRight: 10}}/>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item name='Activities' as={NavLink} to='/activities'/>\n                <Menu.Item>\n                    <Button\n                        as={NavLink}\n                        to='/createActivity'\n                        positive\n                        content='Create Activity'\n                    />\n                </Menu.Item>\n                {user && (\n                    <Menu.Item position='right'>\n                        <Image avatar spaced='right' src={user.image || '/assets/user.png'}/>\n                        <Dropdown pointing='top left' text={user.displayName}>\n                            <Dropdown.Menu>\n                                <Dropdown.Item\n                                    as={Link}\n                                    to={`/profile/${user.username}`}\n                                    text='My profile'\n                                    icon='user'\n                                />\n                                <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>\n                )}\n            </Container>\n        </Menu>\n    );\n};\n\nexport default observer(NavBar);\n","import React from 'react';\nimport {List, Image, Popup} from 'semantic-ui-react';\nimport {IAttendee} from \"../../../app/models/activity\";\n\ninterface IProps {\n    attendees: IAttendee[]\n}\n\n\nconst styles = {\n    boderColor: 'orange',\n    borderWidth: 2\n};\n\nconst ActivityListItemAttendees: React.FC<IProps> = ({attendees}) => {\n\n\n    return (\n        <List horizontal>\n            {attendees.map((attendee) => (\n                <List.Item key={attendee.username}>\n                    <Popup header={attendee.displayName} trigger={\n                        <Image size='mini' circular src={attendee.image || `/assets/user.png`} bordered\n                               style={attendee.following ? styles : null}/>\n                    }/>\n\n                </List.Item>\n            ))}\n        </List>\n    )\n};\n\nexport default ActivityListItemAttendees; ","import React from 'react';\nimport {Item, Button, Segment, Icon, Label} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {IActivity} from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({activity}) => {\n    const host = activity.attendees.filter(x => x.isHost)[0];\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={host.image || '/assets/user.png'}\n                                    style={{marginBottom: '3px'}}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by\n                                <Link to={`/profile/${host.username}`}> {host.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='orange'\n                                        content='You are hosting this activity'\n                                    />\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='green'\n                                        content='You are going to this activity'\n                                    />\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <Icon name='clock'/> {format(activity.date, 'h:mm a')}\n                <Icon name='marker'/> {activity.venue}, {activity.city}\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendees attendees={activity.attendees}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    floated='right'\n                    content='View'\n                    color='blue'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default ActivityListItem;\n","import React, {useContext, Fragment} from 'react';\nimport {Item, Label} from 'semantic-ui-react';\nimport {observer} from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst ActivityList: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {activitiesByDate} = rootStore.activityStore;\n    \n\n    return (\n        <Fragment>\n            {activitiesByDate.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Label size='large' color='blue'>\n                        {group}\n                    </Label>\n                    <Item.Group divided>\n                        {activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity}/>\n                        ))}\n                    </Item.Group>\n                </Fragment>\n            ))}\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityList);\n","import React, { Fragment, useContext } from 'react';\nimport { Menu, Header } from 'semantic-ui-react';\nimport { Calendar } from 'react-widgets';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\nimport { observer } from 'mobx-react-lite';\n\nconst ActivityFilters = () => {\n    const rootStore = useContext(RootStoreContext);\n    const { predicate, setPredicate } = rootStore.activityStore;\n    return (\n        <Fragment>\n            <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\n                <Header icon={'filter'} attached color={'teal'} content={'Filters'} />\n                <Menu.Item\n                    active={predicate.size === 0}\n                    onClick={() => setPredicate('all', 'true')}\n                    color={'blue'}\n                    name={'all'}\n                    content={'All Activities'}\n                />\n                <Menu.Item\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                    color={'blue'}\n                    name={'username'}\n                    content={\"I'm Going\"}\n                />\n                <Menu.Item\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                    color={'blue'}\n                    name={'host'}\n                    content={\"I'm hosting\"}\n                />\n            </Menu>\n            <Header\n                icon={'calendar'}\n                attached\n                color={'teal'}\n                content={'Select Date'}\n            />\n            <Calendar\n                onChange={date => setPredicate('startDate', date!)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityFilters);","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 50 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\nexport default ActivityListItemPlaceholder;","import React, {useContext, useEffect, useState} from 'react';\nimport {Grid, Loader} from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport {observer} from 'mobx-react-lite';\n// import LoadingComponent from '../../../app/layout/LoadingComponent';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from 'react-infinite-scroller'\nimport ActivityFilter from \"./ActivityFilter\";\nimport ActivityListItemPlaceholder from \"./ActivityItemListPlaceholder\";\n\nconst ActivityDashboard: React.FC = () => {\n\n    const rootStore = useContext(RootStoreContext); // fetching root store \n    const {loadActivities, loadingInitial, setPage, page, totalPages} = rootStore.activityStore; // de-structuring the props \n    const [loadingNext, setLoadingNext] = useState(false); // setting local state\n\n    // this is something handling the next reloading piece of data \n    const handleGetNext = () => {\n        setLoadingNext(true);\n        setPage(page + 1);\n        loadActivities().then(() => setLoadingNext(false))\n    };\n\n    // on component load - this hook comes alike\n    useEffect(() => {\n        loadActivities();\n    }, [loadActivities]);\n\n    // conditional rendering of Loading component\n    // if (loadingInitial && page === 0) {\n    //     return <LoadingComponent content='Loading activities'/>;\n    // }\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                {loadingInitial && page === 0 ? <ActivityListItemPlaceholder/> : (\n                    <InfiniteScroll pageStart={0} loadMore={handleGetNext}\n                                    hasMore={!loadingNext && page + 1 < totalPages}\n                                    initialLoad={false}>\n                        <ActivityList/>\n                    </InfiniteScroll>\n                )}\n\n                {/*<Button floated={'right'} content={'More...'} positive onClick={handleGetNext} loading={loadingNext}*/}\n                {/*        disabled={totalPages === page + 1}/>*/}\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityFilter/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDashboard);\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport {AxiosResponse} from 'axios';\nimport {Message} from 'semantic-ui-react';\n\ninterface IProps {\n    error: AxiosResponse;\n    text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\n    return (\n        <Message error>\n            <Message.Header>{error.statusText}</Message.Header>\n            {error.data && Object.keys(error.data.errors).length > 0 && (\n                <Message.List>\n                    {Object.values(error.data.errors).flat().map((err, i) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n            {text && <Message.Content content={text}/>}\n        </Message>\n    );\n};\n\nexport default ErrorMessage;\n","import React, {useContext} from 'react';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Form, Button, Header} from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport {IUserFormValues} from '../../app/models/user';\nimport {FORM_ERROR} from 'final-form';\nimport {combineValidators, isRequired} from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n    email: isRequired('Email'),\n    password: isRequired('Password')\n});\n\nconst LoginForm = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {login} = rootStore.userStore;\n    return (\n        <FinalForm\n            onSubmit={(values: IUserFormValues) =>\n                login(values).catch(error => ({\n                    [FORM_ERROR]: error\n                }))\n            }\n            validate={validate}\n            render={({\n                         handleSubmit,\n                         submitting,\n                         submitError,\n                         invalid,\n                         pristine,\n                         dirtySinceLastSubmit\n                     }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header\n                        as='h2'\n                        content='Login to Reactivities'\n                        color='teal'\n                        textAlign='center'\n                    />\n                    <Field name='email' component={TextInput} placeholder='Email'/>\n                    <Field\n                        name='password'\n                        component={TextInput}\n                        placeholder='Password'\n                        type='password'\n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                        <ErrorMessage\n                            error={submitError}\n                            text='Invalid email or password'\n                        />\n                    )}\n                    <Button\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                        loading={submitting}\n                        color='teal'\n                        content='Login'\n                        fluid\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default LoginForm;\n","import React, {useContext} from 'react';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Form, Button, Header} from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport {IUserFormValues} from '../../app/models/user';\nimport {FORM_ERROR} from 'final-form';\nimport {combineValidators, isRequired} from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n    username: isRequired('Username'),\n    displayName: isRequired('DisplayName'),\n    email: isRequired('Email'),\n    password: isRequired('Password')\n});\n\nconst RegisterForm = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {register} = rootStore.userStore;\n    return (\n        <FinalForm\n            onSubmit={(values: IUserFormValues) =>\n                register(values).catch(error => ({\n                    [FORM_ERROR]: error\n                }))\n            }\n            validate={validate}\n            render={({\n                         handleSubmit,\n                         submitting,\n                         submitError,\n                         invalid,\n                         pristine,\n                         dirtySinceLastSubmit\n                     }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header\n                        as='h2'\n                        content='Sign up to Reactivities'\n                        color='teal'\n                        textAlign='center'\n                    />\n                    <Field name='username' component={TextInput} placeholder='Username'/>\n                    <Field\n                        name='displayName'\n                        component={TextInput}\n                        placeholder='Display Name'\n                    />\n                    <Field name='email' component={TextInput} placeholder='Email'/>\n                    <Field\n                        name='password'\n                        component={TextInput}\n                        placeholder='Password'\n                        type='password'\n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                        <ErrorMessage\n                            error={submitError}\n                        />\n                    )}\n                    <Button\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                        loading={submitting}\n                        color='teal'\n                        content='Register'\n                        fluid\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default RegisterForm;\n","import React, {useContext, Fragment} from 'react';\nimport {Container, Segment, Header, Button, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\n\nconst HomePage = () => {\n    \n    const token = window.localStorage.getItem('jwt');\n\n    const rootStore = useContext(RootStoreContext);\n\n    const {isLoggedIn, user} = rootStore.userStore;\n\n    const {openModal} = rootStore.modalStore;\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image\n                        size='massive'\n                        src='/assets/logo.png'\n                        alt='logo'\n                        style={{marginBottom: 12}}\n                    />\n                    Reactivities\n                </Header>\n                {isLoggedIn && user && token ?\n                    (<Fragment>\n\n                        <Header as='h2' inverted content={`Welcome back ${user.displayName}`}/>\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Take me to the activities!\n                        </Button>\n\n                    </Fragment>) : (\n                        <Fragment>\n                            <Header as='h2' inverted content='Welcome to Reactivities'/>\n                            <Button onClick={() => openModal(<LoginForm/>)} size='huge' inverted>\n                                Login\n                            </Button>\n                            <Button onClick={() => openModal(<RegisterForm/>)} size='huge' inverted>\n                                Register\n                            </Button>\n                        </Fragment>)}\n            </Container>\n        </Segment>\n    );\n};\n\nexport default HomePage;\n","export interface IActivitiesEnvelope {\n    activities: IActivity[];\n    activityCount: number;\n}\n\nexport interface IActivity {\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    date: Date;\n    city: string;\n    venue: string;\n    isGoing: boolean;\n    isHost: boolean;\n    attendees: IAttendee[];\n    comments: IComment[];\n}\n\nexport interface IComment {\n    id: string;\n    createdAt: Date;\n    body: string;\n    username: string;\n    displayName: string;\n    image: string;\n}\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n    time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date?: Date = undefined;\n    time?: Date = undefined;\n    city: string = '';\n    venue: string = '';\n\n    constructor(init?: IActivityFormValues) {\n        if (init && init.date) {\n            init.time = init.date;\n        }\n        Object.assign(this, init);\n    }\n}\n\nexport interface IAttendee {\n    username: string;\n    displayName: string;\n    image: string;\n    isHost: boolean;\n    following?: boolean;\n}\n\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput\n","export const category = [\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\n  { key: 'culture', text: 'Culture', value: 'culture' },\n  { key: 'film', text: 'Film', value: 'film' },\n  { key: 'food', text: 'Food', value: 'food' },\n  { key: 'music', text: 'Music', value: 'music' },\n  { key: 'travel', text: 'Travel', value: 'travel' }\n];","import React, {useState, useContext, useEffect} from 'react';\nimport {Segment, Form, Button, Grid} from 'semantic-ui-react';\nimport {ActivityFormValues} from '../../../app/models/activity';\nimport {v4 as uuid} from 'uuid';\nimport {observer} from 'mobx-react-lite';\nimport {RouteComponentProps} from 'react-router';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport {category} from '../../../app/common/options/categoryOptions';\nimport {combineDateAndTime} from '../../../app/common/util/util';\nimport {\n    combineValidators,\n    isRequired,\n    composeValidators,\n    hasLengthGreaterThan\n} from 'revalidate';\nimport {RootStoreContext} from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n    title: isRequired({message: 'The event title is required'}),\n    category: isRequired('Category'),\n    description: composeValidators(\n        isRequired('Description'),\n        hasLengthGreaterThan(4)({\n            message: 'Description needs to be at least 5 characters'\n        })\n    )(),\n    city: isRequired('City'),\n    venue: isRequired('Venue'),\n    date: isRequired('Date'),\n    time: isRequired('Time')\n});\n\ninterface DetailParams {\n    id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n                                                                       match,\n                                                                       history\n                                                                   }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {\n        createActivity,\n        editActivity,\n        submitting,\n        loadActivity\n    } = rootStore.activityStore;\n\n    const [activity, setActivity] = useState(new ActivityFormValues());\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (match.params.id) {\n            setLoading(true);\n            loadActivity(match.params.id)\n                .then(activity => {\n                    setActivity(new ActivityFormValues(activity));\n                })\n                .finally(() => setLoading(false));\n        }\n    }, [loadActivity, match.params.id]);\n\n    const handleFinalFormSubmit = (values: any) => {\n        const dateAndTime = combineDateAndTime(values.date, values.time);\n        const {date, time, ...activity} = values;\n        activity.date = dateAndTime;\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity);\n        } else {\n            editActivity(activity);\n        }\n    };\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <Segment clearing>\n                    <FinalForm\n                        validate={validate}\n                        initialValues={activity}\n                        onSubmit={handleFinalFormSubmit}\n                        render={({handleSubmit, invalid, pristine}) => (\n                            <Form onSubmit={handleSubmit} loading={loading}>\n                                <Field\n                                    name='title'\n                                    placeholder='Title'\n                                    value={activity.title}\n                                    component={TextInput}\n                                />\n                                <Field\n                                    name='description'\n                                    placeholder='Description'\n                                    rows={3}\n                                    value={activity.description}\n                                    component={TextAreaInput}\n                                />\n                                <Field\n                                    component={SelectInput}\n                                    options={category}\n                                    name='category'\n                                    placeholder='Category'\n                                    value={activity.category}\n                                />\n                                <Form.Group widths='equal'>\n                                    <Field\n                                        component={DateInput}\n                                        name='date'\n                                        date={true}\n                                        placeholder='Date'\n                                        value={activity.date}\n                                    />\n                                    <Field\n                                        component={DateInput}\n                                        name='time'\n                                        time={true}\n                                        placeholder='Time'\n                                        value={activity.time}\n                                    />\n                                </Form.Group>\n\n                                <Field\n                                    component={TextInput}\n                                    name='city'\n                                    placeholder='City'\n                                    value={activity.city}\n                                />\n                                <Field\n                                    component={TextInput}\n                                    name='venue'\n                                    placeholder='Venue'\n                                    value={activity.venue}\n                                />\n                                <Button\n                                    loading={submitting}\n                                    disabled={loading || invalid || pristine}\n                                    floated='right'\n                                    positive\n                                    type='submit'\n                                    content='Submit'\n                                />\n                                <Button\n                                    onClick={\n                                        activity.id\n                                            ? () => history.push(`/activities/${activity.id}`)\n                                            : () => history.push('/activities')\n                                    }\n                                    disabled={loading}\n                                    floated='right'\n                                    type='button'\n                                    content='Cancel'\n                                />\n                            </Form>\n                        )}\n                    />\n                </Segment>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityForm);","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, {useContext} from 'react';\nimport {Segment, Item, Header, Button, Image} from 'semantic-ui-react';\nimport {IActivity} from '../../../app/models/activity';\nimport {observer} from 'mobx-react-lite';\nimport {Link} from 'react-router-dom';\nimport {format} from 'date-fns';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({activity}) => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {attendActivity, cancelAttendee, loading} = rootStore.activityStore;\n    const host = activity.attendees.filter(x => x.isHost)[0];\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                    fluid\n                    style={activityImageStyle}\n                />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\n                                <p>\n                                    Hosted by <Link\n                                    to={`/profile/${host.username}`}><strong> {host.displayName}</strong></Link>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            < Segment\n                clearing\n                attached='bottom'>\n\n\n                {\n                    activity.isHost ? (<Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\n                        Manage Event\n                    </Button>) : activity.isGoing ? (\n                        <Button loading={loading} onClick={cancelAttendee}>Cancel attendance</Button>) : (\n                        <Button loading={loading} color='teal' onClick={attendActivity}>Join Activity</Button>)\n                }\n\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\n\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date, 'eeee do MMMM')} at {format(activity.date!, 'h:mm a')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import React, {Fragment, useContext, useEffect} from 'react';\nimport {Segment, Header, Form, Button, Comment} from 'semantic-ui-react';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Link} from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport {formatDistance} from \"date-fns\";\n\n\nconst ActivityDetailedChat = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {createHubConnection, stopHubConnection, addComment, activity} = rootStore.activityStore;\n\n    useEffect(() => {\n        createHubConnection(activity!.id);\n\n        return () => {\n            stopHubConnection();\n        }\n    }, [createHubConnection, stopHubConnection, activity]);\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached>\n                <Comment.Group>\n                    {\n                        activity && activity.comments && activity.comments.map(comment => (\n                                <Comment key={comment.id}>\n                                    <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                                    <Comment.Content>\n                                        <Comment.Author as={Link}\n                                                        to={`profile/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                        <Comment.Metadata>\n                                            <div>{formatDistance(comment.createdAt, new Date())}</div>\n                                        </Comment.Metadata>\n                                        <Comment.Text>{comment.body}</Comment.Text>\n\n                                    </Comment.Content>\n                                </Comment>\n                            )\n                        )\n                    }\n\n                    <FinalForm onSubmit={addComment} render={({handleSubmit, submitting, form}) => (\n                        <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                            <Field\n                                name={'body'}\n                                component={TextAreaInput}\n                                rows={2}\n                                placeholder={'Add your comment...'}\n                            />\n                            <Button\n                                content='Add Reply'\n                                labelPosition='left'\n                                icon='edit'\n                                primary\n                                loading={submitting}\n                            />\n                        </Form>\n                    )}/>\n\n                </Comment.Group>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React, {Fragment} from 'react';\nimport {Segment, List, Item, Label, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {IAttendee} from \"../../../app/models/activity\";\nimport {observer} from \"mobx-react-lite\";\n\ninterface IProps {\n    attendees: IAttendee[]\n}\n\nconst ActivityDetailedSidebar: React.FC<IProps> = ({attendees}) => {\n\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                style={{border: 'none'}}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'}\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map((attendee) => (\n                            <Item style={{position: 'relative'}} key={attendee.username}>\n                                {attendee.isHost &&\n                                <Label style={{position: 'absolute'}}\n                                       color='orange'\n                                       ribbon='right'>\n                                    {attendee.displayName}\n                                </Label>}\n                                <Image size='tiny' src={attendee.image || '/assets/user.png'}/>\n                                <Item.Content verticalAlign='middle'>\n                                    <Item.Header as='h3'>\n                                        <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\n                                    </Item.Header>\n                                    {\n                                        attendee.following && <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>\n                                    }\n\n                                </Item.Content>\n                            </Item>\n                        )\n                    )}\n\n                </List>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import React, {useContext, useEffect} from 'react';\nimport {Grid} from 'semantic-ui-react';\n\nimport {observer} from 'mobx-react-lite';\nimport {RouteComponentProps} from 'react-router';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\ninterface DetailParams {\n    id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n                                                                          match,\n                                                                          history\n                                                                      }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {activity, loadActivity, loadingInitial} = rootStore.activityStore;\n\n    useEffect(() => {\n        loadActivity(match.params.id);\n    }, [loadActivity, match.params.id, history]);\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...'/>;\n\n    if (!activity) return <h2>Activity not found</h2>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar attendees={activity.attendees}/>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import React, {useContext} from 'react';\nimport {Modal} from 'semantic-ui-react';\nimport {RootStoreContext} from '../../stores/rootStore';\nimport {observer} from 'mobx-react-lite';\n\nconst ModalContainer = () => {\n\n    const rootStore = useContext(RootStoreContext);\n\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\n\n    return (\n        <Modal open={open} onClose={closeModal} size='mini'>\n            <Modal.Content>{body}</Modal.Content>\n        </Modal>\n    );\n};\n\nexport default observer(ModalContainer);\n","import React from 'react';\nimport {\n    Segment,\n    Item,\n    Header,\n    Button,\n    Grid,\n    Statistic,\n    Divider,\n    Reveal\n} from 'semantic-ui-react';\nimport {observer} from \"mobx-react-lite\";\nimport {IProfile} from \"../../app/models/profile\";\n\ninterface IProps {\n    profile: IProfile,\n    isCurrentUser: boolean,\n    follow: (username: string) => void,\n    unfollow: (username: string) => void\n    loading: boolean;\n}\n\nconst ProfileHeader: React.FC<IProps> = ({profile, isCurrentUser, follow, unfollow, loading}) => {\n    \n    \n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1'>{profile.displayName}</Header>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount}/>\n                        <Statistic label='Following' value={profile.followingCount}/>\n                    </Statistic.Group>\n                    <Divider/>\n                    {!isCurrentUser &&\n                    <Reveal animated='move'>\n                        <Reveal.Content visible style={{width: '100%'}}>\n                            <Button fluid color='teal' content={profile.following ? 'Following' : 'Not Following'}/>\n                        </Reveal.Content>\n                        <Reveal.Content hidden>\n                            <Button\n                                loading={loading}\n                                fluid\n                                basic\n                                color={profile.following ? 'red' : 'green'}\n                                content={profile.following ? 'Un-Follow' : 'Follow'}\n                                onClick={profile.following ? (() => unfollow(profile.username)) : (() => follow(profile.username))}\n                            />\n                        </Reveal.Content>\n                    </Reveal>\n                    }\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default observer(ProfileHeader);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Icon, Header } from 'semantic-ui-react';\nimport { observer } from \"mobx-react-lite\";\n\ninterface IProps {\n    setFiles: (files: object[]) => void;\n}\n\nconst dropzoneStyles = {\n    border: 'dashed 3px',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: '200px',\n    cursor: 'pointer'\n};\n\nconst dropzoneActive = {\n    borderColor: 'green'\n};\n\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(\n            acceptedFiles.map((file: object) =>\n                Object.assign(file, {\n                    preview: URL.createObjectURL(file)\n                })\n            )\n        );\n    }, [setFiles]);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n    return (\n        <div\n            {...getRootProps()}\n            style={\n                isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\n            }\n        >\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    );\n};\n\nexport default observer(PhotoWidgetDropzone);\n","import React, {useRef} from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n    setImage: (file: Blob) => void;\n    imagePreview: string;\n}\n\nconst PhotoWidgetCropper: React.FC<IProps> = ({setImage, imagePreview}) => {\n    \n    const cropper = useRef<Cropper>(null);\n\n    const cropImage = () => {\n        if (\n            cropper.current &&\n            typeof cropper.current.getCroppedCanvas() === 'undefined'\n        ) {\n            return;\n        }\n        cropper &&\n        cropper.current &&\n        cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n            setImage(blob);\n        }, 'image/jpeg');\n    };\n\n\n    \n    return (\n        <div>\n            <Cropper\n                ref={cropper}\n                src={imagePreview}\n                style={{height: 400, width: '100%'}}\n                // Cropper.js options\n                preview='.img-preview'\n                aspectRatio={1 / 1}\n                guides={false}\n                viewMode={1}\n                scalable={true}\n                crop={cropImage}\n            />\n        </div>\n    )\n};\n\nexport default PhotoWidgetCropper;","import React, { Fragment, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport { Grid, Header, Button } from \"semantic-ui-react\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\n\ninterface IProps {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n    const [files, setFiles] = useState<any[]>([]);\n    const [image, setImage] = useState<Blob | null>(null);\n\n    useEffect(() => {\n        return () => {\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        }\n    });\n    return (\n        <Fragment>\n            <Grid>\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 1 - Add Photo' sub />\n                    <PhotoWidgetDropzone setFiles={setFiles} />\n                </Grid.Column>\n\n                <Grid.Column width={1} />\n\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 2 - Resize Photo' sub />\n                    {files.length > 0 && <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview} />}\n                </Grid.Column>\n\n                <Grid.Column width={1} />\n\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 3 - Preview & Upload' sub />\n                    {files.length > 0 &&\n                        <Fragment>\n                            <div className=\"img-preview\" style={{ minHeight: '200px', overflow: 'hidden' }} />\n                            <Button.Group widths={2}>\n                                <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)} />\n                                <Button icon='close' disabled={loading} onClick={() => setFiles([])} />\n                            </Button.Group>\n                        </Fragment>\n\n                    }\n                </Grid.Column>\n\n            </Grid>\n        </Fragment>\n    );\n};\n\nexport default observer(PhotoUploadWidget);","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Card, Header, Tab, Image, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\n\nconst ProfilePhotos = () => {\n    const rootStore = useContext(RootStoreContext);\n    const { profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, loading, deletePhoto } = rootStore.profileStore;\n\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState<string | undefined>(undefined);\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\n\n    const handleUploadImage = (photo: Blob) => {\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n                    {isCurrentUser && (\n                        <Button\n                            floated=\"right\"\n                            basic\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handleUploadImage} loading={uploadingPhoto} />\n                    ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile &&\n                                    profile.photos.map(photo => (\n                                        <Card key={photo.id}>\n                                            <Image src={photo.url} />\n                                            {isCurrentUser && (\n                                                <Button.Group fluid widths={2}>\n                                                    <Button name={photo.id} basic positive content=\"Main\"\n                                                        onClick={(e) => {\n                                                            setTarget(e.currentTarget.name);\n                                                            setMainPhoto(photo);\n                                                        }}\n                                                        loading={loading && target === photo.id}\n                                                        disabled={photo.isMain}\n                                                    />\n                                                    <Button name={photo.id} basic negative icon=\"trash\"\n                                                        onClick={(e) => {\n                                                            deletePhoto(photo);\n                                                            setDeleteTarget(e.currentTarget.name);\n                                                        }}\n                                                        loading={loading && deleteTarget === photo.id}\n                                                        disabled={photo.isMain}\n                                                    />\n                                                </Button.Group>\n                                            )}\n                                        </Card>\n                                    ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfilePhotos);\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Field, Form as FinalForm} from \"react-final-form\";\nimport {combineValidators, isRequired} from \"revalidate\";\nimport {IProfile} from \"../../app/models/profile\";\nimport {Button, Form} from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../app/common/form/TextAreaInput\";\n\n\nconst validate = combineValidators({\n    displayName: isRequired('displayName')\n});\n\ninterface IProps {\n    updateProfile: (profile: IProfile) => void;\n    profile: IProfile;    \n}\n\nconst ProfileEditForm: React.FC<IProps> = ({updateProfile, profile}) => {\n    return (\n        <FinalForm onSubmit={updateProfile} validate={validate} initialValues={profile!} \n            render={({handleSubmit, invalid, pristine, submitting}) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Field name='displayName' component={TextInput} placeholder='Display Name' value={profile!.displayName} />\n\n                    <Field name='bio' component={TextAreaInput} placeholder='Bio' value={profile!.bio} />\n                    \n                    <Button loading={submitting} floated={'right'} disabled={invalid || pristine} positive content='Update Profile' />\n                </Form>\n            )}\n        /> \n            \n        \n    )\n};\n\nexport default observer(ProfileEditForm);","import React, {useContext, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Grid, Header, Tab} from 'semantic-ui-react';\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport ProfileEditForm from \"./ProfileEditForm\";\n\n\nconst ProfileDescription = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {updateProfile, profile, isCurrentUser} = rootStore.profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated={'left'} icon={'user'} content={`About ${profile!.username}`}/>\n                    {isCurrentUser && (\n                        <Button floated={'right'} basic content={editMode ? 'Cancel' : 'Edit Profile'}\n                                onClick={() => setEditMode(!editMode)}/>)}\n                </Grid.Column>\n\n                <Grid.Column width={16}>\n                    {editMode ? (<ProfileEditForm updateProfile={updateProfile} profile={profile!}/>) : (\n                        <span>{profile!.bio}</span>)}\n                </Grid.Column>\n\n            </Grid>\n        </Tab.Pane>\n    )\n};\n\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport {Card, Image, Icon} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {observer} from \"mobx-react-lite\";\nimport {IProfile} from \"../../app/models/profile\";\n\ninterface IProps {\n    profile: IProfile\n}\n\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n\n    console.log('this is ravi to check : ', profile);\n    return (\n        <Card as={Link} to={`/profile/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'}/>\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n            </Card.Content>\n            <Card.Content extra>\n                <div>\n                    <Icon name='user'/>\n                    {profile.followersCount} Followers\n                </div>\n            </Card.Content>\n        </Card>\n    );\n};\n\nexport default observer(ProfileCard);\n","import React, {useContext} from 'react';\nimport {Tab, Grid, Header, Card} from 'semantic-ui-react';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\nimport {observer} from \"mobx-react-lite\";\n\nconst ProfileFollowings = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {profile, followings, loading, activeTab} = rootStore.profileStore;\n\n    // useEffect(() => {\n    //     loadingFollowings('followers');\n    // }, [loadingFollowings]);\n\n\n    return (\n        <Tab.Pane loading={loading}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={\n                            activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile!.displayName} is following`\n                        }\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={5}>\n                        {followings.map((profile) => (<ProfileCard key={profile.username} profile={profile}/>))}\n\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileFollowings);\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\n];\n\nconst ProfileEvents = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = rootStore.profileStore!;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n        data: TabProps\n    ) => {\n        let predicate;\n        switch (data.activeIndex) {\n            case 1:\n                predicate = 'past';\n                break;\n            case 2:\n                predicate = 'hosting';\n                break;\n            default:\n                predicate = 'future';\n                break;\n        }\n        loadUserActivities(profile!.username, predicate);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: IUserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileEvents);","import React from 'react';\nimport {Tab} from 'semantic-ui-react';\nimport {observer} from \"mobx-react-lite\";\nimport ProfilePhotos from \"./ProfilePhotos\";\nimport ProfileDescription from \"./ProfileDescription\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfileActivities from \"./ProfileActivities\";\n\ninterface IProps {\n    setActiveTab: (activeIndex: any) => void;\n}\n\nconst panes = [\n    {menuItem: 'About', render: () => <ProfileDescription/>},\n    {menuItem: 'Photos', render: () => <ProfilePhotos/>},\n    {menuItem: 'Activities', render: () => <ProfileActivities/>},\n    {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n    {menuItem: 'Following', render: () => <ProfileFollowings/>}\n];\nconst ProfileContent: React.FC<IProps> = ({setActiveTab}) => {\n    return (\n        <Tab menu={{fluid: true, vertical: true}} menuPosition='right' panes={panes}\n            onTabChange={(e, data)=> setActiveTab(data.activeIndex) }\n        />\n    )\n};\n\nexport default observer(ProfileContent);","import React, {useContext, useEffect} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Grid} from \"semantic-ui-react\";\nimport ProfileHeader from \"./ProfileHeader\";\nimport ProfileContent from \"./ProfileContent\";\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport {RouteComponentProps} from 'react-router';\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\n\ninterface RouteParams {\n    username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {\n}\n\nconst ProfilePage: React.FC<IProps> = ({match}) => {\n    const rootStore = useContext(RootStoreContext);\n\n    const {loadingProfile, loadProfile, profile, follow, unfollow, isCurrentUser, loading, setActiveTab} = rootStore.profileStore;\n\n    useEffect(() => {\n\n        loadProfile(match.params.username);\n\n    }, [loadProfile, match]);\n\n    console.log('Profile : ', profile);\n    console.log('isCurrentUser : ', isCurrentUser);\n\n\n    if (loadingProfile) return (<LoadingComponent content='Loading Profile ...'/>);\n\n    return (\n        <Grid>\n            <Grid.Column\n                width={16}>\n                <ProfileHeader loading={loading} profile={profile!} isCurrentUser={isCurrentUser} follow={follow}\n                               unfollow={unfollow}/>\n                <ProfileContent setActiveTab={setActiveTab}/>\n            </Grid.Column>\n        </Grid>\n    )\n        ;\n};\n\n\nexport default observer(ProfilePage);","import React, {useContext} from \"react\";\nimport {RouteProps, RouteComponentProps, Route, Redirect} from 'react-router-dom';\nimport {RootStoreContext} from \"../stores/rootStore\";\nimport {observer} from \"mobx-react-lite\";\n\ninterface IProps extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>>\n}\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest}) => {\n    const rootStore = useContext(RootStoreContext);\n    const {isLoggedIn} = rootStore.userStore;\n    return (\n        <Route\n            {...rest}\n\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'}/>}\n        />\n    )\n};\n\nexport default observer(PrivateRoute);","import React, {Fragment, useContext, useEffect} from 'react';\nimport {Container} from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport {\n    Route,\n    withRouter,\n    RouteComponentProps,\n    Switch\n} from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport {ToastContainer} from 'react-toastify';\n// import LoginForm from '../../features/user/LoginForm';\nimport {RootStoreContext} from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from \"../common/models/ModalContainer\";\nimport ProfilePage from \"../../features/profile/ProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\n// import RegisterForm from \"../../features/user/RegisterForm\";\n\n\nconst App: React.FC<RouteComponentProps> = ({location}) => {\n    const rootStore = useContext(RootStoreContext);\n    const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\n    const {getUser} = rootStore.userStore;\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => setAppLoaded())\n        } else {\n            setAppLoaded();\n        }\n    }, [getUser, setAppLoaded, token]);\n\n    if (!appLoaded) return <LoadingComponent content='Loading app...'/>\n\n    return (\n        <Fragment>\n            <ModalContainer/>\n            <ToastContainer position='bottom-right'/>\n            <Route exact path='/' component={HomePage}/>\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <Fragment>\n                        <NavBar/>\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n                                <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n                                <PrivateRoute\n                                    key={location.key}\n                                    path={['/createActivity', '/manage/:id']}\n                                    component={ActivityForm}\n                                />\n                                <PrivateRoute path='/profile/:username' component={ProfilePage}/>\n                                {/*<Route path='/login' component={LoginForm}/>*/}\n                                {/*<Route path='/register' component={RegisterForm}/>*/}\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </Container>\n                    </Fragment>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {useEffect} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [pathname]);\n  \n    return children || null;\n  };\n  \n  export default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}