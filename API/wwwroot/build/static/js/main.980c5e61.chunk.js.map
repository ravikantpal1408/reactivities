{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","app/layout/LoadingComponent.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","app/models/activity.ts","app/common/form/TextAreaInput.tsx","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/models/ModalContainer.tsx","features/profile/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profile/ProfilePhotos.tsx","features/profile/ProfileEditForm.tsx","features/profile/ProfileDescription.tsx","features/profile/ProfileContent.tsx","features/profile/ProfilePage.tsx","app/layout/App.tsx","serviceWorker.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","method","errors","hasOwnProperty","responseBody","sleep","ms","resolve","setTimeout","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","details","id","create","activity","update","attend","unattend","currentUser","login","user","register","username","uploadPhoto","photo","setMain","deletePhoto","editProfile","profile","setActivityProps","date","Date","isGoing","userActivities","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","toISOString","split","groupActivitiesByDate","Array","from","values","Map","action","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","info","e","stop","err","computed","loadingInitial","agent","forEach","userStore","set","submitting","attendee","attendees","event","target","currentTarget","name","loading","filter","UserStore","setToken","modalStore","closeModal","CommonStore","reaction","setItem","removeItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","loadingProfile","uploadingPhoto","photos","isMain","find","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","ActivityListItemAttendees","List","horizontal","map","key","Popup","trigger","size","circular","ActivityListItem","host","x","Segment","Group","marginBottom","Content","Header","title","Description","Label","basic","color","Icon","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","LoadingComponent","Dimmer","active","Loader","loadActivities","useEffect","Grid","Column","width","TextInput","input","type","placeholder","meta","touched","Form","Field","ErrorMessage","Message","statusText","keys","length","flat","i","validate","combineValidators","email","isRequired","password","LoginForm","onSubmit","FORM_ERROR","render","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","textAlign","component","disabled","fluid","RegisterForm","HomePage","isLoggedIn","openModal","vertical","className","ActivityFormValues","init","category","time","assign","TextAreaInput","rows","SelectInput","options","Select","value","onChange","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","useState","setActivity","setLoading","params","finally","initialValues","dateAndTime","timeString","getHours","getMinutes","year","getFullYear","month","getMonth","day","getDate","dateString","combineDateAndTime","newActivity","uuid","widths","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendee","attached","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","Statistic","label","Divider","Reveal","animated","visible","hidden","dropzoneStyles","borderColor","borderRadius","paddingTop","cursor","dropzoneActive","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","scalable","crop","current","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","minHeight","overflow","isCurrentUser","setMainPhoto","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","updateProfile","bio","editMode","setEditMode","panes","menuItem","menu","menuPosition","loadProfile","withRouter","location","setAppLoaded","getUser","path","marginTop","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","Boolean","hostname","children","pathname","scrollTo","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.980c5e61.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios';\nimport {IActivity} from '../models/activity';\nimport {history} from '../..';\nimport {toast} from 'react-toastify';\nimport {IUser, IUserFormValues} from \"../models/user\";\nimport {IProfile, IPhoto} from \"../models/profile\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use((config) => {\n    const token = window.localStorage.getItem('jwt');\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n}, error => {\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(undefined, error => {\n\n    if (error.message === 'Network Error' && !error.response) {\n        toast.error('Network error - make sure API is running!')\n    }\n    const {status, data, config} = error.response;\n    if (status === 404) {\n        history.push('/notfound')\n    }\n    if (status === 400 && config.method === 'get' && data.errors.hasOwnProperty('id')) {\n        history.push('/notfound')\n    }\n    if (status === 500) {\n        toast.error('Server error - check the terminal for more info!')\n    }\n\n    throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\n\nconst sleep = (ms: number) => (response: AxiosResponse) =>\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\n\nconst requests = {\n    get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(1000)).then(responseBody),\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(1000)).then(responseBody),\n    del: (url: string) => axios.delete(url).then(sleep(1000)).then(responseBody),\n    postForm: (url: string, file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file)\n        return axios.post(url, formData,\n            {\n                headers: {'Content-type': 'multipart/form-data'}\n            }).then(responseBody)\n    }\n};\n\nconst Activities = {\n    list: (): Promise<IActivity[]> => requests.get('/activities'),\n    details: (id: string) => requests.get(`/activities/${id}`),\n    create: (activity: IActivity) => requests.post('/activities', activity),\n    update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del(`/activities/${id}`),\n    attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n    unattend: (id: string) => requests.del(`/activities/${id}/attend`)\n};\n\nconst User = {\n    currentUser: (): Promise<IUser> => requests.get('/user'),\n    login: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/login`, user),\n    register: (user: IUserFormValues): Promise<IUser> => requests.post(`/user/register`, user),\n\n};\n\nconst Profile = {\n    get: (username: string): Promise<IProfile> => requests.get(`/profiles/${username}`),\n    uploadPhoto: (photo: Blob): Promise<IPhoto> => requests.postForm(`/photos`, photo),\n    setMain: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    editProfile: (profile: Partial<IProfile>) => requests.put(`/profiles`, profile)\n};\n\nexport default {\n    Activities,\n    User,\n    Profile\n}","import {IActivity, IAttendee} from \"../../models/activity\";\nimport {IUser} from \"../../models/user\";\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n    const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\n\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const dateString = `${year}-${month}-${day}`;\n\n    return new Date(dateString + ' ' + timeString);\n};\n\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n    activity.date = new Date(activity.date);\n    activity.isGoing = activity.userActivities.some(\n        a => a.username === user.username\n    );\n\n    activity.isHost = activity.userActivities.some(\n        a => a.username === user.username && a.isHost\n    );\n\n    return activity;\n};\n\nexport const createAttendee = (user: IUser): IAttendee => {\n\n    return {\n        displayName: user.displayName,\n        isHost: false,\n        username: user.username,\n        image: user.image!,\n    };\n};","import {action, computed, observable, runInAction} from 'mobx';\nimport {SyntheticEvent} from 'react';\nimport {IActivity} from '../models/activity';\nimport agent from '../api/agent';\nimport {history} from '../..';\nimport {toast} from 'react-toastify';\nimport {RootStore} from \"./rootStore\";\nimport {createAttendee, setActivityProps} from \"../common/util/util\";\nimport {HubConnection, HubConnectionBuilder, LogLevel} from \"@microsoft/signalr\";\n\n\n\nexport default class ActivityStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable activityRegistry = new Map();\n    @observable activity: IActivity | null = null;\n    @observable loadingInitial = false;\n    @observable submitting = false;\n    @observable target = '';\n    @observable loading = false;\n    @observable.ref hubConnection: HubConnection | null = null; // this observable is for signalR\n\n\n    // create signalR hub connection \n    @action createHubConnection = (activityId: string) => {\n        try {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl('http://localhost:5000/chat', {\n                    accessTokenFactory: () => this.rootStore.commonStore.token!\n                })\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection\n                .start()\n                .then(() =>\n                    console.log(this.hubConnection!.state)\n                ).then(() => {\n                console.log('Attempting to join group !!');\n                // this will call method from ChatHub.cs file that is created on server\n                this.hubConnection!.invoke('AddToGroup', activityId);\n\n            }).catch(error => console.log('Error establishing connection : ', error));\n\n            // when we receive the comment\n            this.hubConnection.on('ReceiveComment', comment => {\n                runInAction(() => {\n                    this.activity!.comments.push(comment);\n                });\n            });\n\n            this.hubConnection.on('Send', message => {\n                toast.info(message);\n            });\n        } catch (e) {\n            console.log('Some error happened');\n        }\n    };\n\n    // stop signalR hub connection \n    @action stopHubConnection = () => {\n        this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\n            .then(() => {\n                this.hubConnection!.stop();\n            })\n            .then(() => console.log('Connection stopped'))\n            .catch(err => console.log('error happened while stopping a chat connection !'));\n\n    };\n\n    // add comment \n    @action addComment = async (values: any) => {\n        values.activityId = this.activity!.id;\n        try {\n            await this.hubConnection!.invoke('SendComment', values);\n\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    @computed get activitiesByDate() {\n        return this.groupActivitiesByDate(Array.from(this.activityRegistry.values()))\n    }\n\n    groupActivitiesByDate(activities: IActivity[]) {\n        const sortedActivities = activities.sort(\n            (a, b) => a.date.getTime() - b.date.getTime()\n        );\n        return Object.entries(sortedActivities.reduce((activities, activity) => {\n            const date = activity.date.toISOString().split('T')[0];\n            activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n            return activities;\n        }, {} as { [key: string]: IActivity[] }));\n    }\n\n    @action loadActivities = async () => {\n        this.loadingInitial = true;\n\n        try {\n            const activities = await agent.Activities.list();\n\n            console.log('my all activities : ', activities);\n            runInAction('loading activities', () => {\n                activities.forEach(activity => {\n                    // setting props for activities\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activityRegistry.set(activity.id, activity);\n\n                });\n                this.loadingInitial = false;\n            });\n        } catch (error) {\n            runInAction('load activities error', () => {\n                this.loadingInitial = false;\n            });\n        }\n    };\n\n    @action loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.activity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                runInAction('getting activity', () => {\n                    setActivityProps(activity, this.rootStore.userStore.user!);\n                    this.activity = activity;\n                    this.activityRegistry.set(activity.id, activity);\n                    this.loadingInitial = false;\n                });\n                return activity;\n            } catch (error) {\n                runInAction('get activity error', () => {\n                    this.loadingInitial = false;\n                });\n                console.log(error);\n            }\n        }\n    };\n\n    @action clearActivity = () => {\n        this.activity = null;\n    };\n\n    getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    };\n\n    @action createActivity = async (activity: IActivity) => {\n        this.submitting = true;\n        try {\n            await agent.Activities.create(activity);\n            const attendee = createAttendee(this.rootStore.userStore.user!);\n            attendee.isHost = true;\n            let attendees = [];\n            attendees.push(attendee);\n            activity.userActivities = attendees;\n            activity.comments = [];\n            activity.isHost = true;\n            runInAction('create activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.submitting = false;\n            });\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('create activity error', () => {\n                this.submitting = false;\n            });\n            toast.error('Problem submitting data');\n            console.log(error.response);\n        }\n    };\n\n    @action editActivity = async (activity: IActivity) => {\n        this.submitting = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction('editing activity', () => {\n                this.activityRegistry.set(activity.id, activity);\n                this.activity = activity;\n                this.submitting = false;\n            });\n            history.push(`/activities/${activity.id}`)\n        } catch (error) {\n            runInAction('edit activity error', () => {\n                this.submitting = false;\n            });\n            toast.error('Problem submitting data');\n            console.log(error);\n        }\n    };\n\n    @action deleteActivity = async (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\n        this.submitting = true;\n        this.target = event.currentTarget.name;\n        try {\n            await agent.Activities.delete(id);\n            runInAction('deleting activity', () => {\n                this.activityRegistry.delete(id);\n                this.submitting = false;\n                this.target = '';\n            });\n        } catch (error) {\n            runInAction('delete activity error', () => {\n                this.submitting = false;\n                this.target = '';\n            });\n            console.log(error);\n        }\n    };\n\n    @action attendActivity = async () => {\n        const attendee = createAttendee(this.rootStore.userStore.user!);\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.activity!.id);\n            runInAction(() => {\n                if (this.activity) {\n                    this.activity.userActivities.push(attendee);\n                    this.activity.isGoing = true;\n                    this.activityRegistry.set(this.activity.id, this.activity);\n                    this.loading = false;\n                }\n            })\n\n        } catch (error) {\n            runInAction(() => {\n                this.loading = false;\n            });\n            toast.error('problem signing up to activity');\n        }\n\n    };\n\n    @action cancelAttendee = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.unattend(this.activity!.id);\n            runInAction(() => {\n                if (this.activity) {\n                    this.activity.userActivities = this.activity.userActivities\n                        .filter(a => a.username !== this.rootStore.userStore.user!.username);\n                    this.activity.isGoing = false;\n                    this.activityRegistry.set(this.activity.id, this.activity);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => {\n                this.loading = false;\n            });\n            console.log('problem cancelling attendance');\n\n        }\n\n    };\n}\n\n","import {action, computed, observable, runInAction} from \"mobx\";\nimport {IUser, IUserFormValues} from \"../models/user\";\nimport agent from \"../api/agent\";\nimport {RootStore} from \"./rootStore\";\nimport {history} from '../..';\n\nexport default class UserStore {\n\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable user: IUser | null = null;\n\n    @computed get isLoggedIn() {\n        return !!this.user;\n    }\n\n    @action login = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.login(values);\n            runInAction(() => {\n                this.user = user;\n                // console.log('current user :', user)\n            });\n\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    };\n\n    @action register = async (values: IUserFormValues) => {\n        try {\n            const user = await agent.User.register((values));\n\n            runInAction(() => {\n                this.user = user;\n            });\n\n            this.rootStore.commonStore.setToken(user.token);\n            this.rootStore.modalStore.closeModal();\n            history.push('/activities')\n\n        } catch (error) {\n            console.log(error);\n            throw error;\n        }\n    };\n\n    @action getUser = async () => {\n        try {\n            const user = await agent.User.currentUser();\n            runInAction(() => {\n                this.user = user;\n            });\n        } catch (e) {\n            console.log('Error : ', e);\n            throw e\n        }\n    };\n\n\n    @action logout = () => {\n        this.rootStore.commonStore.setToken(null);\n        this.user = null;\n        history.push('/')\n    };\n\n\n}","import {RootStore} from \"./rootStore\";\nimport {action, observable, reaction} from \"mobx\";\n\nexport default class CommonStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n\n        reaction(() => this.token, token => {\n            if (token) {\n                window.localStorage.setItem('jwt', token);\n            } else {\n                window.localStorage.removeItem('jwt');\n            }\n        })\n    }\n\n    @observable token: string | null = window.localStorage.getItem('jwt');\n    @observable appLoaded = false;\n\n\n    @action setToken = (token: string | null) => {\n        // window.localStorage.setItem('jwt', token!);\n        this.token = token;\n    };\n\n\n    @action setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n\n}","import {RootStore} from \"./rootStore\";\nimport {observable, action} from \"mobx\";\n\nexport default class ModalStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable.shallow modal = {\n        open: false,\n        body: null\n    };\n\n    @action openModal = (content: any) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    };\n\n    @action closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    };\n}","import {RootStore} from \"./rootStore\";\nimport {action, computed, observable, runInAction} from \"mobx\";\nimport {IProfile, IPhoto} from \"../models/profile\";\nimport agent from \"../api/agent\";\nimport {toast} from \"react-toastify\";\n\nexport default class ProfileStore {\n    rootStore: RootStore;\n\n    constructor(rootStore: RootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @observable profile: IProfile | null = null;\n    @observable loadingProfile: boolean = true;\n    @observable uploadingPhoto: boolean = false;\n    @observable loading: boolean = false;\n\n\n    @computed get isCurrentUser() {\n        if (this.rootStore.userStore.user && this.profile) {\n            return this.rootStore.userStore.user.username === this.profile.username;\n        } else {\n            return false;\n        }\n    }\n\n\n    @action loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profile.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n\n        } catch (error) {\n\n            runInAction(() => {\n                this.loadingProfile = false;\n\n            });\n            console.log('error happened : ', error)\n\n        }\n    };\n\n    @action uploadPhoto = async (file: Blob) => {\n        try {\n            this.uploadingPhoto = true;\n            const photo = await agent.Profile.uploadPhoto(file);\n            runInAction(() => {\n\n                if (this.profile) {\n                    this.profile.photos.push(photo);\n                    if (photo.isMain && this.rootStore.userStore.user) {\n                        this.rootStore.userStore.user.image = photo.url;\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploadingPhoto = false;\n            });\n        } catch (error) {\n            console.log('Error happened in uploading photo')\n            console.log(error)\n            runInAction(() => {\n                toast.error('Problem uploading photo')\n                this.uploadingPhoto = false;\n            })\n        }\n\n    };\n\n    @action setMainPhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profile.setMain(photo.id);\n            runInAction(() => {\n                this.rootStore.userStore.user!.image = photo.url;\n                this.profile!.photos.find(a => a.isMain)!.isMain = false;\n                this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\n                this.profile!.image = photo.url;\n                this.loading = false;\n            });\n        } catch (error) {\n            toast.error('Problem setting photo as main');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n    @action updateProfile = async (profile: Partial<IProfile>) => {\n        try {\n            await agent.Profile.editProfile(profile);\n            runInAction(() => {\n                if (profile.displayName !== this.rootStore.userStore.user!.displayName) {\n                    this.rootStore.userStore.user!.displayName = profile.displayName!;\n                    this.profile = {...this.profile!, ...profile};\n                }\n            });\n        } catch (error) {\n            toast.error(\"Problem updating profile\");\n        }\n    };\n\n\n    @action deletePhoto = async (photo: IPhoto) => {\n        this.loading = true;\n        try {\n            await agent.Profile.deletePhoto(photo.id);\n            runInAction(() => {\n                this.profile!.photos = this.profile!.photos.filter(\n                    a => a.id !== photo.id\n                );\n                this.loading = false;\n            });\n        } catch (error) {\n            toast.error('Problem deleting the photo');\n            runInAction(() => {\n                this.loading = false;\n            });\n        }\n    };\n\n} ","import ActivityStore from \"./activityStore\";\nimport UserStore from \"./userStore\";\nimport {createContext} from \"react\";\nimport {configure} from \"mobx\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\n\nconfigure({enforceActions: 'always'});\n\nexport class RootStore {\n    activityStore: ActivityStore;\n    userStore: UserStore;\n    commonStore: CommonStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n\n    constructor() {\n        this.activityStore = new ActivityStore(this);\n        this.userStore = new UserStore(this);\n        this.commonStore = new CommonStore(this);\n        this.modalStore = new ModalStore(this);\n        this.profileStore = new ProfileStore(this);\n    }\n\n}\n\nexport const RootStoreContext = createContext(new RootStore()); ","import React, {useContext} from 'react';\nimport {Menu, Container, Button, Dropdown, Image} from 'semantic-ui-react';\nimport {observer} from 'mobx-react-lite';\nimport {NavLink, Link} from 'react-router-dom';\nimport {RootStoreContext} from '../../app/stores/rootStore';\n\nconst NavBar: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {user, logout} = rootStore.userStore;\n    return (\n        <Menu fixed='top' inverted>\n            <Container>\n                <Menu.Item header as={NavLink} exact to='/'>\n                    <img src='/assets/logo.png' alt='logo' style={{marginRight: 10}}/>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item name='Activities' as={NavLink} to='/activities'/>\n                <Menu.Item>\n                    <Button\n                        as={NavLink}\n                        to='/createActivity'\n                        positive\n                        content='Create Activity'\n                    />\n                </Menu.Item>\n                {user && (\n                    <Menu.Item position='right'>\n                        <Image avatar spaced='right' src={user.image || '/assets/user.png'}/>\n                        <Dropdown pointing='top left' text={user.displayName}>\n                            <Dropdown.Menu>\n                                <Dropdown.Item\n                                    as={Link}\n                                    to={`/profile/${user.username}`}\n                                    text='My profile'\n                                    icon='user'\n                                />\n                                <Dropdown.Item onClick={logout} text='Logout' icon='power'/>\n                            </Dropdown.Menu>\n                        </Dropdown>\n                    </Menu.Item>\n                )}\n            </Container>\n        </Menu>\n    );\n};\n\nexport default observer(NavBar);\n","import React from 'react';\nimport {List, Image, Popup} from 'semantic-ui-react';\nimport {IAttendee} from \"../../../app/models/activity\";\n\ninterface IProps {\n    attendees: IAttendee[]\n}\n\nconst ActivityListItemAttendees: React.FC<IProps> = ({attendees}) => {\n\n\n    return (\n        <List horizontal>\n            {attendees.map((attendee) => (\n                <List.Item key={attendee.username}>\n                    <Popup header={attendee.displayName} trigger={\n                        <Image size='mini' circular src={attendee.image || `/assets/user.png`}/>\n                    }/>\n\n                </List.Item>\n            ))}\n        </List>\n    )\n};\n\nexport default ActivityListItemAttendees; ","import React from 'react';\nimport {Item, Button, Segment, Icon, Label} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {IActivity} from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({activity}) => {\n    const host = activity.userActivities.filter(x => x.isHost)[0];\n    return (\n        <Segment.Group>\n            <Segment>\n                <Item.Group>\n                    <Item>\n                        <Item.Image size='tiny' circular src={host.image || '/assets/user.png'}\n                                    style={{marginBottom: '3px'}}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by\n                                <Link to={`/profile/${host.username}`}> {host.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='orange'\n                                        content='You are hosting this activity'\n                                    />\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label\n                                        basic\n                                        color='green'\n                                        content='You are going to this activity'\n                                    />\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <Icon name='clock'/> {format(activity.date, 'h:mm a')}\n                <Icon name='marker'/> {activity.venue}, {activity.city}\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendees attendees={activity.userActivities}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    floated='right'\n                    content='View'\n                    color='blue'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default ActivityListItem;\n","import React, {useContext, Fragment} from 'react';\nimport {Item, Label} from 'semantic-ui-react';\nimport {observer} from 'mobx-react-lite';\nimport ActivityListItem from './ActivityListItem';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst ActivityList: React.FC = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {activitiesByDate} = rootStore.activityStore;\n    \n\n    return (\n        <Fragment>\n            {activitiesByDate.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Label size='large' color='blue'>\n                        {group}\n                    </Label>\n                    <Item.Group divided>\n                        {activities.map(activity => (\n                            <ActivityListItem key={activity.id} activity={activity}/>\n                        ))}\n                    </Item.Group>\n                </Fragment>\n            ))}\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityList);\n","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;\n","import React, {useContext, useEffect} from 'react';\nimport {Grid} from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport {observer} from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst ActivityDashboard: React.FC = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {loadActivities, loadingInitial} = rootStore.activityStore;\n\n    useEffect(() => {\n        loadActivities();\n    }, [loadActivities]);\n\n    if (loadingInitial)\n        return <LoadingComponent content='Loading activities'/>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityList/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <h2>Activity filters</h2>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDashboard);\n","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLInputElement>,\n    FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} type={type} width={width}>\n      <input {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport {AxiosResponse} from 'axios';\nimport {Message} from 'semantic-ui-react';\n\ninterface IProps {\n    error: AxiosResponse;\n    text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\n    return (\n        <Message error>\n            <Message.Header>{error.statusText}</Message.Header>\n            {error.data && Object.keys(error.data.errors).length > 0 && (\n                <Message.List>\n                    {Object.values(error.data.errors).flat().map((err, i) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n            {text && <Message.Content content={text}/>}\n        </Message>\n    );\n};\n\nexport default ErrorMessage;\n","import React, {useContext} from 'react';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Form, Button, Header} from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport {IUserFormValues} from '../../app/models/user';\nimport {FORM_ERROR} from 'final-form';\nimport {combineValidators, isRequired} from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n    email: isRequired('Email'),\n    password: isRequired('Password')\n});\n\nconst LoginForm = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {login} = rootStore.userStore;\n    return (\n        <FinalForm\n            onSubmit={(values: IUserFormValues) =>\n                login(values).catch(error => ({\n                    [FORM_ERROR]: error\n                }))\n            }\n            validate={validate}\n            render={({\n                         handleSubmit,\n                         submitting,\n                         submitError,\n                         invalid,\n                         pristine,\n                         dirtySinceLastSubmit\n                     }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header\n                        as='h2'\n                        content='Login to Reactivities'\n                        color='teal'\n                        textAlign='center'\n                    />\n                    <Field name='email' component={TextInput} placeholder='Email'/>\n                    <Field\n                        name='password'\n                        component={TextInput}\n                        placeholder='Password'\n                        type='password'\n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                        <ErrorMessage\n                            error={submitError}\n                            text='Invalid email or password'\n                        />\n                    )}\n                    <Button\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                        loading={submitting}\n                        color='teal'\n                        content='Login'\n                        fluid\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default LoginForm;\n","import React, {useContext} from 'react';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Form, Button, Header} from 'semantic-ui-react';\nimport TextInput from '../../app/common/form/TextInput';\nimport {RootStoreContext} from '../../app/stores/rootStore';\nimport {IUserFormValues} from '../../app/models/user';\nimport {FORM_ERROR} from 'final-form';\nimport {combineValidators, isRequired} from 'revalidate';\nimport ErrorMessage from '../../app/common/form/ErrorMessage';\n\nconst validate = combineValidators({\n    username: isRequired('Username'),\n    displayName: isRequired('DisplayName'),\n    email: isRequired('Email'),\n    password: isRequired('Password')\n});\n\nconst RegisterForm = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {register} = rootStore.userStore;\n    return (\n        <FinalForm\n            onSubmit={(values: IUserFormValues) =>\n                register(values).catch(error => ({\n                    [FORM_ERROR]: error\n                }))\n            }\n            validate={validate}\n            render={({\n                         handleSubmit,\n                         submitting,\n                         submitError,\n                         invalid,\n                         pristine,\n                         dirtySinceLastSubmit\n                     }) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Header\n                        as='h2'\n                        content='Sign up to Reactivities'\n                        color='teal'\n                        textAlign='center'\n                    />\n                    <Field name='username' component={TextInput} placeholder='Username'/>\n                    <Field\n                        name='displayName'\n                        component={TextInput}\n                        placeholder='Display Name'\n                    />\n                    <Field name='email' component={TextInput} placeholder='Email'/>\n                    <Field\n                        name='password'\n                        component={TextInput}\n                        placeholder='Password'\n                        type='password'\n                    />\n                    {submitError && !dirtySinceLastSubmit && (\n                        <ErrorMessage\n                            error={submitError}\n                        />\n                    )}\n                    <Button\n                        disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n                        loading={submitting}\n                        color='teal'\n                        content='Register'\n                        fluid\n                    />\n                </Form>\n            )}\n        />\n    );\n};\n\nexport default RegisterForm;\n","import React, {useContext, Fragment} from 'react';\nimport {Container, Segment, Header, Button, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\n\nconst HomePage = () => {\n\n    const rootStore = useContext(RootStoreContext);\n\n    const {isLoggedIn, user} = rootStore.userStore;\n\n    const {openModal} = rootStore.modalStore;\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image\n                        size='massive'\n                        src='/assets/logo.png'\n                        alt='logo'\n                        style={{marginBottom: 12}}\n                    />\n                    Reactivities\n                </Header>\n                {isLoggedIn && user ?\n                    (<Fragment>\n\n                        <Header as='h2' inverted content={`Welcome back ${user.displayName}`}/>\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Take me to the activities!\n                        </Button>\n\n                    </Fragment>) : (\n                        <Fragment>\n                            <Header as='h2' inverted content='Welcome to Reactivities'/>\n                            <Button onClick={() => openModal(<LoginForm/>)} size='huge' inverted>\n                                Login\n                            </Button>\n                            <Button onClick={() => openModal(<RegisterForm/>)} size='huge' inverted>\n                                Register\n                            </Button>\n                        </Fragment>)}\n            </Container>\n        </Segment>\n    );\n};\n\nexport default HomePage;\n","export interface IActivitiesEnvelope {\n    activities: IActivity[];\n    activityCount: number;\n}\n\nexport interface IActivity {\n    id: string;\n    title: string;\n    description: string;\n    category: string;\n    date: Date;\n    city: string;\n    venue: string;\n    isGoing: boolean;\n    isHost: boolean;\n    userActivities: IAttendee[];\n    comments: IComment[];\n}\n\nexport interface IComment {\n    id: string;\n    createdAt: Date;\n    body: string;\n    username: string;\n    displayName: string;\n    image: string;\n}\n\nexport interface IActivityFormValues extends Partial<IActivity> {\n    time?: Date;\n}\n\nexport class ActivityFormValues implements IActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date?: Date = undefined;\n    time?: Date = undefined;\n    city: string = '';\n    venue: string = '';\n\n    constructor(init?: IActivityFormValues) {\n        if (init && init.date) {\n            init.time = init.date;\n        }\n        Object.assign(this, init);\n    }\n}\n\nexport interface IAttendee {\n    username: string;\n    displayName: string;\n    image: string;\n    isHost: boolean;\n    following?: boolean;\n}","import React from 'react';\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLTextAreaElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error }\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color='red'>\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label, Select } from 'semantic-ui-react';\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLSelectElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n    input,\n    width,\n    options,\n    placeholder,\n    meta: { touched, error }\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <Select \n            value={input.value}\n            onChange={(e, data) => input.onChange(data.value)}\n            placeholder={placeholder}\n            options={options}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default SelectInput\n","import React from 'react'\nimport { FieldRenderProps } from 'react-final-form';\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\nimport {DateTimePicker} from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLInputElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n    input,\n    width,\n    placeholder,\n    date = false,\n    time = false,\n    meta: { touched, error },\n    ...rest\n  }) => {\n    return (\n        <Form.Field error={touched && !!error} width={width}>\n        <DateTimePicker \n            placeholder={placeholder}\n            value={input.value || null}\n            onChange={input.onChange}\n            onBlur={input.onBlur}\n            onKeyDown={(e) => e.preventDefault()}\n            date={date}\n            time={time}\n            {...rest}\n        />\n        {touched && error && (\n          <Label basic color='red'>\n            {error}\n          </Label>\n        )}\n      </Form.Field>\n    )\n}\n\nexport default DateInput\n","export const category = [\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\n  { key: 'culture', text: 'Culture', value: 'culture' },\n  { key: 'film', text: 'Film', value: 'film' },\n  { key: 'food', text: 'Food', value: 'food' },\n  { key: 'music', text: 'Music', value: 'music' },\n  { key: 'travel', text: 'Travel', value: 'travel' }\n];","import React, {useState, useContext, useEffect} from 'react';\nimport {Segment, Form, Button, Grid} from 'semantic-ui-react';\nimport {ActivityFormValues} from '../../../app/models/activity';\nimport {v4 as uuid} from 'uuid';\nimport {observer} from 'mobx-react-lite';\nimport {RouteComponentProps} from 'react-router';\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport {category} from '../../../app/common/options/categoryOptions';\nimport {combineDateAndTime} from '../../../app/common/util/util';\nimport {\n    combineValidators,\n    isRequired,\n    composeValidators,\n    hasLengthGreaterThan\n} from 'revalidate';\nimport {RootStoreContext} from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n    title: isRequired({message: 'The event title is required'}),\n    category: isRequired('Category'),\n    description: composeValidators(\n        isRequired('Description'),\n        hasLengthGreaterThan(4)({\n            message: 'Description needs to be at least 5 characters'\n        })\n    )(),\n    city: isRequired('City'),\n    venue: isRequired('Venue'),\n    date: isRequired('Date'),\n    time: isRequired('Time')\n});\n\ninterface DetailParams {\n    id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n                                                                       match,\n                                                                       history\n                                                                   }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {\n        createActivity,\n        editActivity,\n        submitting,\n        loadActivity\n    } = rootStore.activityStore;\n\n    const [activity, setActivity] = useState(new ActivityFormValues());\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (match.params.id) {\n            setLoading(true);\n            loadActivity(match.params.id)\n                .then(activity => {\n                    setActivity(new ActivityFormValues(activity));\n                })\n                .finally(() => setLoading(false));\n        }\n    }, [loadActivity, match.params.id]);\n\n    const handleFinalFormSubmit = (values: any) => {\n        const dateAndTime = combineDateAndTime(values.date, values.time);\n        const {date, time, ...activity} = values;\n        activity.date = dateAndTime;\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n\n            console.log('This is new activity form payload data :', newActivity);\n            createActivity(newActivity);\n        } else {\n            editActivity(activity);\n        }\n    };\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <Segment clearing>\n                    <FinalForm\n                        validate={validate}\n                        initialValues={activity}\n                        onSubmit={handleFinalFormSubmit}\n                        render={({handleSubmit, invalid, pristine}) => (\n                            <Form onSubmit={handleSubmit} loading={loading}>\n                                <Field\n                                    name='title'\n                                    placeholder='Title'\n                                    value={activity.title}\n                                    component={TextInput}\n                                />\n                                <Field\n                                    name='description'\n                                    placeholder='Description'\n                                    rows={3}\n                                    value={activity.description}\n                                    component={TextAreaInput}\n                                />\n                                <Field\n                                    component={SelectInput}\n                                    options={category}\n                                    name='category'\n                                    placeholder='Category'\n                                    value={activity.category}\n                                />\n                                <Form.Group widths='equal'>\n                                    <Field\n                                        component={DateInput}\n                                        name='date'\n                                        date={true}\n                                        placeholder='Date'\n                                        value={activity.date}\n                                    />\n                                    <Field\n                                        component={DateInput}\n                                        name='time'\n                                        time={true}\n                                        placeholder='Time'\n                                        value={activity.time}\n                                    />\n                                </Form.Group>\n\n                                <Field\n                                    component={TextInput}\n                                    name='city'\n                                    placeholder='City'\n                                    value={activity.city}\n                                />\n                                <Field\n                                    component={TextInput}\n                                    name='venue'\n                                    placeholder='Venue'\n                                    value={activity.venue}\n                                />\n                                <Button\n                                    loading={submitting}\n                                    disabled={loading || invalid || pristine}\n                                    floated='right'\n                                    positive\n                                    type='submit'\n                                    content='Submit'\n                                />\n                                <Button\n                                    onClick={\n                                        activity.id\n                                            ? () => history.push(`/activities/${activity.id}`)\n                                            : () => history.push('/activities')\n                                    }\n                                    disabled={loading}\n                                    floated='right'\n                                    type='button'\n                                    content='Cancel'\n                                />\n                            </Form>\n                        )}\n                    />\n                </Segment>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityForm);\n","import React, {useContext} from 'react';\nimport {Segment, Item, Header, Button, Image} from 'semantic-ui-react';\nimport {IActivity} from '../../../app/models/activity';\nimport {observer} from 'mobx-react-lite';\nimport {Link} from 'react-router-dom';\nimport {format} from 'date-fns';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\nconst ActivityDetailedHeader: React.FC<{ activity: IActivity }> = ({activity}) => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {attendActivity, cancelAttendee, loading} = rootStore.activityStore;\n    const host = activity.userActivities.filter(x => x.isHost)[0];\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                <Image\n                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                    fluid\n                    style={activityImageStyle}\n                />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date, 'eeee do MMMM')}</p>\n                                <p>\n                                    Hosted by <Link\n                                    to={`/profile/${host.username}`}><strong> {host.displayName}</strong></Link>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            < Segment\n                clearing\n                attached='bottom'>\n\n\n                {\n                    activity.isHost ? (<Button as={Link} to={`/manage/${activity.id}`} color='orange' floated='right'>\n                        Manage Event\n                    </Button>) : activity.isGoing ? (\n                        <Button loading={loading} onClick={cancelAttendee}>Cancel attendance</Button>) : (\n                        <Button loading={loading} color='teal' onClick={attendActivity}>Join Activity</Button>)\n                }\n\n            </Segment>\n        </Segment.Group>\n    );\n};\n\nexport default observer(ActivityDetailedHeader);\n","import React from 'react';\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\nimport { IActivity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\n\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\n  return (\n    <Segment.Group>\n      <Segment attached='top'>\n        <Grid>\n          <Grid.Column width={1}>\n            <Icon size='large' color='teal' name='info' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <p>{activity.description}</p>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='calendar' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={15}>\n            <span>{format(activity.date, 'eeee do MMMM')} at {format(activity.date!, 'h:mm a')}</span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n      <Segment attached>\n        <Grid verticalAlign='middle'>\n          <Grid.Column width={1}>\n            <Icon name='marker' size='large' color='teal' />\n          </Grid.Column>\n          <Grid.Column width={11}>\n            <span>\n              {activity.venue}, {activity.city}\n            </span>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityDetailedInfo;\n","import React, {Fragment, useContext, useEffect} from 'react';\nimport {Segment, Header, Form, Button, Comment} from 'semantic-ui-react';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {Form as FinalForm, Field} from 'react-final-form';\nimport {Link} from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport {formatDistance} from \"date-fns\";\n\n\nconst ActivityDetailedChat = () => {\n    const rootStore = useContext(RootStoreContext);\n    const {createHubConnection, stopHubConnection, addComment, activity} = rootStore.activityStore;\n\n    useEffect(() => {\n        createHubConnection(activity!.id);\n\n        return () => {\n            stopHubConnection();\n        }\n    }, [createHubConnection, stopHubConnection, activity]);\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached>\n                <Comment.Group>\n                    {\n                        activity && activity.comments && activity.comments.map(comment => (\n                                <Comment key={comment.id}>\n                                    <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                                    <Comment.Content>\n                                        <Comment.Author as={Link}\n                                                        to={`profile/${comment.username}`}>{comment.displayName}</Comment.Author>\n                                        <Comment.Metadata>\n                                            <div>{formatDistance(comment.createdAt, new Date())}</div>\n                                        </Comment.Metadata>\n                                        <Comment.Text>{comment.body}</Comment.Text>\n\n                                    </Comment.Content>\n                                </Comment>\n                            )\n                        )\n                    }\n\n                    <FinalForm onSubmit={addComment} render={({handleSubmit, submitting, form}) => (\n                        <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                            <Field\n                                name={'body'}\n                                component={TextAreaInput}\n                                rows={2}\n                                placeholder={'Add your comment...'}\n                            />\n                            <Button\n                                content='Add Reply'\n                                labelPosition='left'\n                                icon='edit'\n                                primary\n                                loading={submitting}\n                            />\n                        </Form>\n                    )}/>\n\n                </Comment.Group>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedChat);\n","import React, {Fragment} from 'react';\nimport {Segment, List, Item, Label, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {IAttendee} from \"../../../app/models/activity\";\nimport {observer} from \"mobx-react-lite\";\n\ninterface IProps {\n    attendees: IAttendee[]\n}\n\nconst ActivityDetailedSidebar: React.FC<IProps> = ({attendees}) => {\n\n    return (\n        <Fragment>\n            <Segment\n                textAlign='center'\n                style={{border: 'none'}}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'}\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map((attendee) => (\n                            <Item style={{position: 'relative'}} key={attendee.username}>\n                                {attendee.isHost &&\n                                <Label style={{position: 'absolute'}}\n                                       color='orange'\n                                       ribbon='right'>\n                                    {attendee.displayName}\n                                </Label>}\n                                <Image size='tiny' src={attendee.image || '/assets/user.png'}/>\n                                <Item.Content verticalAlign='middle'>\n                                    <Item.Header as='h3'>\n                                        <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\n                                    </Item.Header>\n                                    <Item.Extra style={{color: 'orange'}}>Following</Item.Extra>\n                                </Item.Content>\n                            </Item>\n                        )\n                    )}\n\n                </List>\n            </Segment>\n        </Fragment>\n    );\n};\n\nexport default observer(ActivityDetailedSidebar);\n","import React, {useContext, useEffect} from 'react';\nimport {Grid} from 'semantic-ui-react';\n\nimport {observer} from 'mobx-react-lite';\nimport {RouteComponentProps} from 'react-router';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\nimport {RootStoreContext} from \"../../../app/stores/rootStore\";\n\ninterface DetailParams {\n    id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n                                                                          match,\n                                                                          history\n                                                                      }) => {\n    const rootStore = useContext(RootStoreContext);\n    const {activity, loadActivity, loadingInitial} = rootStore.activityStore;\n\n    useEffect(() => {\n        loadActivity(match.params.id);\n    }, [loadActivity, match.params.id, history]);\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...'/>;\n\n    if (!activity) return <h2>Activity not found</h2>;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat/>\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar attendees={activity.userActivities}/>\n            </Grid.Column>\n        </Grid>\n    );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import React, {useContext} from 'react';\nimport {Modal} from 'semantic-ui-react';\nimport {RootStoreContext} from '../../stores/rootStore';\nimport {observer} from 'mobx-react-lite';\n\nconst ModalContainer = () => {\n\n    const rootStore = useContext(RootStoreContext);\n\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\n\n    return (\n        <Modal open={open} onClose={closeModal} size='mini'>\n            <Modal.Content>{body}</Modal.Content>\n        </Modal>\n    );\n};\n\nexport default observer(ModalContainer);\n","import React from 'react';\nimport {\n    Segment,\n    Item,\n    Header,\n    Button,\n    Grid,\n    Statistic,\n    Divider,\n    Reveal\n} from 'semantic-ui-react';\nimport { observer } from \"mobx-react-lite\";\nimport { IProfile } from \"../../app/models/profile\";\n\ninterface IProps {\n    profile: IProfile\n}\n\nconst ProfileHeader: React.FC<IProps> = ({ profile }) => {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1'>{profile.displayName}</Header>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value='5' />\n                        <Statistic label='Following' value='42' />\n                    </Statistic.Group>\n                    <Divider />\n                    <Reveal animated='move'>\n                        <Reveal.Content visible style={{ width: '100%' }}>\n                            <Button fluid color='teal' content='Following' />\n                        </Reveal.Content>\n                        <Reveal.Content hidden>\n                            <Button\n                                fluid\n                                basic\n                                color={true ? 'red' : 'green'}\n                                content={true ? 'Unfollow' : 'Follow'}\n                            />\n                        </Reveal.Content>\n                    </Reveal>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n};\n\nexport default observer(ProfileHeader);\n","import React, { useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Icon, Header } from 'semantic-ui-react';\nimport { observer } from \"mobx-react-lite\";\n\ninterface IProps {\n    setFiles: (files: object[]) => void;\n}\n\nconst dropzoneStyles = {\n    border: 'dashed 3px',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: '200px',\n    cursor: 'pointer'\n};\n\nconst dropzoneActive = {\n    borderColor: 'green'\n};\n\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(\n            acceptedFiles.map((file: object) =>\n                Object.assign(file, {\n                    preview: URL.createObjectURL(file)\n                })\n            )\n        );\n    }, [setFiles]);\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n    return (\n        <div\n            {...getRootProps()}\n            style={\n                isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\n            }\n        >\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    );\n};\n\nexport default observer(PhotoWidgetDropzone);\n","import React, {useRef} from 'react';\nimport Cropper from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface IProps {\n    setImage: (file: Blob) => void;\n    imagePreview: string;\n}\n\nconst PhotoWidgetCropper: React.FC<IProps> = ({setImage, imagePreview}) => {\n    \n    const cropper = useRef<Cropper>(null);\n\n    const cropImage = () => {\n        if (\n            cropper.current &&\n            typeof cropper.current.getCroppedCanvas() === 'undefined'\n        ) {\n            return;\n        }\n        cropper &&\n        cropper.current &&\n        cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n            setImage(blob);\n        }, 'image/jpeg');\n    };\n\n\n    \n    return (\n        <div>\n            <Cropper\n                ref={cropper}\n                src={imagePreview}\n                style={{height: 400, width: '100%'}}\n                // Cropper.js options\n                preview='.img-preview'\n                aspectRatio={1 / 1}\n                guides={false}\n                viewMode={1}\n                scalable={true}\n                crop={cropImage}\n            />\n        </div>\n    )\n};\n\nexport default PhotoWidgetCropper;","import React, { Fragment, useEffect, useState } from 'react';\nimport { observer } from \"mobx-react-lite\";\nimport { Grid, Header, Button } from \"semantic-ui-react\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\n\ninterface IProps {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\n    const [files, setFiles] = useState<any[]>([]);\n    const [image, setImage] = useState<Blob | null>(null);\n\n    useEffect(() => {\n        return () => {\n            files.forEach(file => URL.revokeObjectURL(file.preview));\n        }\n    });\n    return (\n        <Fragment>\n            <Grid>\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 1 - Add Photo' sub />\n                    <PhotoWidgetDropzone setFiles={setFiles} />\n                </Grid.Column>\n\n                <Grid.Column width={1} />\n\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 2 - Resize Photo' sub />\n                    {files.length > 0 && <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview} />}\n                </Grid.Column>\n\n                <Grid.Column width={1} />\n\n                <Grid.Column width={4}>\n                    <Header color='teal' content='Step 3 - Preview & Upload' sub />\n                    {files.length > 0 &&\n                        <Fragment>\n                            <div className=\"img-preview\" style={{ minHeight: '200px', overflow: 'hidden' }} />\n                            <Button.Group widths={2}>\n                                <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)} />\n                                <Button icon='close' disabled={loading} onClick={() => setFiles([])} />\n                            </Button.Group>\n                        </Fragment>\n\n                    }\n                </Grid.Column>\n\n            </Grid>\n        </Fragment>\n    );\n};\n\nexport default observer(PhotoUploadWidget);","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Card, Header, Tab, Image, Button, Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\n\nconst ProfilePhotos = () => {\n    const rootStore = useContext(RootStoreContext);\n    const { profile, isCurrentUser, uploadPhoto, uploadingPhoto, setMainPhoto, loading, deletePhoto } = rootStore.profileStore;\n\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState<string | undefined>(undefined);\n    const [deleteTarget, setDeleteTarget] = useState<string | undefined>(undefined);\n\n    const handleUploadImage = (photo: Blob) => {\n        uploadPhoto(photo).then(() => setAddPhotoMode(false));\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n                    {isCurrentUser && (\n                        <Button\n                            floated=\"right\"\n                            basic\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handleUploadImage} loading={uploadingPhoto} />\n                    ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile &&\n                                    profile.photos.map(photo => (\n                                        <Card key={photo.id}>\n                                            <Image src={photo.url} />\n                                            {isCurrentUser && (\n                                                <Button.Group fluid widths={2}>\n                                                    <Button name={photo.id} basic positive content=\"Main\"\n                                                        onClick={(e) => {\n                                                            setTarget(e.currentTarget.name);\n                                                            setMainPhoto(photo);\n                                                        }}\n                                                        loading={loading && target === photo.id}\n                                                        disabled={photo.isMain}\n                                                    />\n                                                    <Button name={photo.id} basic negative icon=\"trash\"\n                                                        onClick={(e) => {\n                                                            deletePhoto(photo);\n                                                            setDeleteTarget(e.currentTarget.name);\n                                                        }}\n                                                        loading={loading && deleteTarget === photo.id}\n                                                        disabled={photo.isMain}\n                                                    />\n                                                </Button.Group>\n                                            )}\n                                        </Card>\n                                    ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfilePhotos);\n","import React from \"react\";\nimport {observer} from \"mobx-react-lite\";\nimport {Field, Form as FinalForm} from \"react-final-form\";\nimport {combineValidators, isRequired} from \"revalidate\";\nimport {IProfile} from \"../../app/models/profile\";\nimport {Button, Form} from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../app/common/form/TextAreaInput\";\n\n\nconst validate = combineValidators({\n    displayName: isRequired('displayName')\n});\n\ninterface IProps {\n    updateProfile: (profile: IProfile) => void;\n    profile: IProfile;    \n}\n\nconst ProfileEditForm: React.FC<IProps> = ({updateProfile, profile}) => {\n    return (\n        <FinalForm onSubmit={updateProfile} validate={validate} initialValues={profile!} \n            render={({handleSubmit, invalid, pristine, submitting}) => (\n                <Form onSubmit={handleSubmit} error>\n                    <Field name='displayName' component={TextInput} placeholder='Display Name' value={profile!.displayName} />\n\n                    <Field name='bio' component={TextAreaInput} placeholder='Bio' value={profile!.bio} />\n                    \n                    <Button loading={submitting} floated={'right'} disabled={invalid || pristine} positive content='Update Profile' />\n                </Form>\n            )}\n        /> \n            \n        \n    )\n};\n\nexport default observer(ProfileEditForm);","import React, {useContext, useState} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Button, Grid, Header, Tab} from 'semantic-ui-react';\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport ProfileEditForm from \"./ProfileEditForm\";\n\n\nconst ProfileDescription = () => {\n\n    const rootStore = useContext(RootStoreContext);\n    const {updateProfile, profile, isCurrentUser} = rootStore.profileStore;\n    const [editMode, setEditMode] = useState(false);\n\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated={'left'} icon={'user'} content={`About ${profile!.username}`}/>\n                    {isCurrentUser && (\n                        <Button floated={'right'} basic content={editMode ? 'Cancel' : 'Edit Profile'}\n                                onClick={() => setEditMode(!editMode)}/>)}\n                </Grid.Column>\n\n                <Grid.Column width={16}>\n                    {editMode ? (<ProfileEditForm updateProfile={updateProfile} profile={profile!}/>) : (\n                        <span>{profile!.bio}</span>)}\n                </Grid.Column>\n\n            </Grid>\n        </Tab.Pane>\n    )\n};\n\n\nexport default observer(ProfileDescription);","import React from 'react';\nimport {Tab} from 'semantic-ui-react';\nimport {observer} from \"mobx-react-lite\";\nimport ProfilePhotos from \"./ProfilePhotos\";\nimport ProfileDescription from \"./ProfileDescription\";\n\nconst panes = [\n    {menuItem: 'About', render: () => <ProfileDescription/>},\n    {menuItem: 'Photos', render: () => <ProfilePhotos/>},\n    {menuItem: 'Activities', render: () => <Tab.Pane>Activities content</Tab.Pane>},\n    {menuItem: 'Followers', render: () => <Tab.Pane>Followers content</Tab.Pane>},\n    {menuItem: 'Following', render: () => <Tab.Pane>Following content</Tab.Pane>}\n];\nconst ProfileContent = () => {\n    return (\n        <Tab menu={{fluid: true, vertical: true}} menuPosition='right' panes={panes}/>\n    )\n};\n\nexport default observer(ProfileContent);","import React, {useContext, useEffect} from 'react';\nimport {observer} from \"mobx-react-lite\";\nimport {Grid} from \"semantic-ui-react\";\nimport ProfileHeader from \"./ProfileHeader\";\nimport ProfileContent from \"./ProfileContent\";\nimport {RootStoreContext} from \"../../app/stores/rootStore\";\nimport {RouteComponentProps} from 'react-router';\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\n\ninterface RouteParams {\n    username: string;\n}\n\ninterface IProps extends RouteComponentProps<RouteParams> {\n}\n\nconst ProfilePage: React.FC<IProps> = ({match}) => {\n    const rootStore = useContext(RootStoreContext);\n\n    const {loadingProfile, loadProfile, profile} = rootStore.profileStore;\n\n    useEffect(() => {\n\n        loadProfile(match.params.username);\n\n    }, [loadProfile, match]);\n\n    if (loadingProfile) return (<LoadingComponent content='Loading Profile ...'/>);\n\n    return (\n        <Grid>\n            <Grid.Column\n                width={16}>\n                <ProfileHeader profile={profile!}/>\n                <ProfileContent/>\n            </Grid.Column>\n        </Grid>\n    )\n        ;\n};\n\n\nexport default observer(ProfilePage);","import React, {Fragment, useContext, useEffect} from 'react';\nimport {Container} from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport {observer} from 'mobx-react-lite';\nimport {\n    Route,\n    withRouter,\n    RouteComponentProps,\n    Switch\n} from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport {ToastContainer} from 'react-toastify';\n// import LoginForm from '../../features/user/LoginForm';\nimport {RootStoreContext} from '../stores/rootStore';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from \"../common/models/ModalContainer\";\nimport ProfilePage from \"../../features/profile/ProfilePage\";\n// import RegisterForm from \"../../features/user/RegisterForm\";\n\n\nconst App: React.FC<RouteComponentProps> = ({location}) => {\n    const rootStore = useContext(RootStoreContext);\n    const {setAppLoaded, token, appLoaded} = rootStore.commonStore;\n    const {getUser} = rootStore.userStore;\n\n    useEffect(() => {\n        if (token) {\n            getUser().finally(() => setAppLoaded())\n        } else {\n            setAppLoaded();\n        }\n    }, [getUser, setAppLoaded, token]);\n\n    if (!appLoaded) return <LoadingComponent content='Loading app...'/>\n\n    return (\n        <Fragment>\n            <ModalContainer/>\n            <ToastContainer position='bottom-right'/>\n            <Route exact path='/' component={HomePage}/>\n            <Route\n                path={'/(.+)'}\n                render={() => (\n                    <Fragment>\n                        <NavBar/>\n                        <Container style={{marginTop: '7em'}}>\n                            <Switch>\n                                <Route exact path='/activities' component={ActivityDashboard}/>\n                                <Route path='/activities/:id' component={ActivityDetails}/>\n                                <Route\n                                    key={location.key}\n                                    path={['/createActivity', '/manage/:id']}\n                                    component={ActivityForm}\n                                />\n                                <Route path='/profile/:username' component={ProfilePage}/>\n                                {/*<Route path='/login' component={LoginForm}/>*/}\n                                {/*<Route path='/register' component={RegisterForm}/>*/}\n                                <Route component={NotFound}/>\n                            </Switch>\n                        </Container>\n                    </Fragment>\n                )}\n            />\n        </Fragment>\n    );\n};\n\nexport default withRouter(observer(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {useEffect} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nconst ScrollToTop = ({ children, location: { pathname } }: any) => {\n    useEffect(() => {\n      window.scrollTo(0, 0);\n    }, [pathname]);\n  \n    return children || null;\n  };\n  \n  export default withRouter(ScrollToTop);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport * as serviceWorker from './serviceWorker';\nimport ScrollToTop from './app/layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop>\n      <App />\n    </ScrollToTop>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}